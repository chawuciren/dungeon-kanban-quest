<%- include('../partials/header', { title: title }) %>

<%- include('../partials/task-header', {
    pageTitle: '任务甘特图',
    currentView: 'gantt',
    currentPath: '/tasks/gantt',
    filters: filters,
    projectMembers: projectMembers,
    sprints: sprints
}) %>

<!-- 甘特图控制面板 -->
<div class="row mb-3">
    <div class="col-12">
        <div class="card">
            <div class="card-body py-2">
                <div class="d-flex justify-content-between align-items-center">
                    <div class="btn-group btn-group-sm" role="group">
                        <button type="button" class="btn btn-outline-secondary <%= (ganttParams && ganttParams.granularity === 'day') ? 'active' : '' %>" id="viewModeDay">日</button>
                        <button type="button" class="btn btn-outline-secondary <%= (ganttParams && ganttParams.granularity === 'week') ? 'active' : '' %>" id="viewModeWeek">周</button>
                        <button type="button" class="btn btn-outline-secondary <%= (ganttParams && ganttParams.granularity === 'month') ? 'active' : '' %>" id="viewModeMonth">月</button>
                    </div>
                    <div class="d-flex align-items-center gap-3">
                        <div class="gantt-legend">
                            <span class="legend-item">
                                <span class="legend-color task-draft"></span>
                                草稿
                            </span>
                            <span class="legend-item">
                                <span class="legend-color task-published"></span>
                                已发布
                            </span>
                            <span class="legend-item">
                                <span class="legend-color task-bidding"></span>
                                竞标中
                            </span>
                            <span class="legend-item">
                                <span class="legend-color task-assigned"></span>
                                已分配
                            </span>
                            <span class="legend-item">
                                <span class="legend-color task-in_progress"></span>
                                进行中
                            </span>
                            <span class="legend-item">
                                <span class="legend-color task-review"></span>
                                待审核
                            </span>
                            <span class="legend-item">
                                <span class="legend-color task-completed"></span>
                                已完成
                            </span>
                            <span class="legend-item">
                                <span class="legend-color task-cancelled"></span>
                                已取消
                            </span>
                        </div>
                        <button type="button" class="btn btn-outline-secondary btn-sm" id="todayBtn">
                            <i class="fas fa-calendar-day me-1"></i>今天
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- 甘特图容器 -->
<div class="row">
    <div class="col-12">
        <div class="card">
            <div class="card-header">
                <h6 class="card-title mb-0">
                    <i class="fas fa-chart-gantt me-2"></i>甘特图
                </h6>
            </div>
            <div class="card-body p-0">
                <!-- 统一的甘特图容器 -->
                <div id="unified-gantt-container" class="unified-gantt-container">
                    <!-- 甘特图头部 -->
                    <div class="unified-gantt-header">
                        <!-- 左侧任务列表头部 -->
                        <div class="task-list-header-section">
                            <div class="task-list-header-content">
                                <span class="fw-bold">任务列表</span>
                            </div>
                        </div>
                        <!-- 右侧时间轴头部容器 -->
                        <div class="gantt-timeline-container">
                            <div class="gantt-timeline" id="gantt-timeline">
                                <!-- 时间轴将在这里生成 -->
                            </div>
                        </div>
                    </div>

                    <!-- 甘特图主体容器 -->
                    <div class="unified-gantt-body-container">
                        <!-- 甘特图主体 -->
                        <div class="unified-gantt-body" id="unified-gantt-body">
                            <!-- 左侧任务列表和右侧甘特图条将在这里同步渲染 -->
                        </div>
                    </div>

                    <!-- 今天线 -->
                    <div class="gantt-today-line" id="gantt-today-line"></div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- 任务详情模态框 -->
<div class="modal fade" id="taskDetailModal" tabindex="-1">
    <div class="modal-dialog modal-xl">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">任务详情</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body" id="taskDetailContent">
                <!-- 任务详情内容将动态加载 -->
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">关闭</button>
                <a href="#" class="btn btn-primary" id="viewTaskBtn">查看详情</a>
            </div>
        </div>
    </div>
</div>

<!-- 自定义甘特图，不使用外部插件 -->

<style>
/* 统一甘特图容器样式 */
.unified-gantt-container {
    min-height: 600px;
    max-height: 800px;
    background: #fff;
    position: relative;
    border: 1px solid #dee2e6;
    display: flex;
    flex-direction: column;
    overflow: hidden;
}

/* 统一甘特图头部 */
.unified-gantt-header {
    display: flex;
    background: #f8f9fa;
    border-bottom: 2px solid #dee2e6;
    flex-shrink: 0;
    position: relative;
    overflow: hidden;
}

/* 左侧任务列表头部区域 */
.task-list-header-section {
    width: 400px;
    min-width: 400px;
    flex-shrink: 0;
    border-right: 2px solid #dee2e6;
    background: #f8f9fa;
    z-index: 10;
}

.task-list-header-content {
    padding: 12px 16px;
    background: #e9ecef;
    font-weight: 600;
    color: #495057;
    border-bottom: 1px solid #dee2e6;
}

/* 右侧时间轴头部容器 */
.gantt-timeline-container {
    flex: 1;
    min-width: 0;
    overflow: hidden;
    position: relative;
}

/* 时间轴本身需要设置宽度 */
.gantt-timeline {
    display: flex;
    flex-direction: column;
    min-width: max-content; /* 确保时间轴有足够宽度 */
}

/* 统一甘特图主体容器 */
.unified-gantt-body-container {
    flex: 1;
    overflow-y: auto;
    overflow-x: auto; /* 这里控制整体的水平滚动 */
    position: relative;
}

/* 统一甘特图主体 */
.unified-gantt-body {
    position: relative;
    display: flex;
    flex-direction: column;
    min-width: max-content; /* 确保内容不被压缩 */
}

/* 左侧任务卡片选中状态 */
.task-card.active {
    background: #e3f2fd !important;
    border-left: 4px solid #2196f3 !important;
    box-shadow: 0 2px 8px rgba(33, 150, 243, 0.3) !important;
    transform: translateX(2px);
    transition: all 0.2s ease;
}

.task-card.active .card-body {
    background: transparent !important;
}

/* 复用列表视图的样式 */
.quick-edit-field.loading {
    opacity: 0.6;
    pointer-events: none;
}

.quick-edit-field.loading::after {
    content: '';
    position: absolute;
    top: 50%;
    right: 10px;
    width: 16px;
    height: 16px;
    margin-top: -8px;
    border: 2px solid #ccc;
    border-top-color: #007bff;
    border-radius: 50%;
    animation: spin 1s linear infinite;
}

@keyframes spin {
    to {
        transform: rotate(360deg);
    }
}

.task-card {
    transition: box-shadow 0.2s ease;
    min-width: 800px; /* 确保卡片有最小宽度 */
}

.task-card:hover {
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
}

.task-card .card-body {
    padding: 0 1rem !important;
    min-height: 60px;
}

.task-card .card-title {
    font-size: 1rem;
    font-weight: 600;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
}

.task-card .badge {
    font-size: 0.75em;
    padding: 0.25em 0.5em;
}

.task-type-badge {
    font-size: 0.8em !important;
    padding: 0.4em 0.6em !important;
    font-weight: 500 !important;
    min-width: 60px;
    text-align: center;
}

/* 自定义紫色背景 */
.bg-purple {
    background-color: #6f42c1 !important;
    color: white !important;
}

.task-card small {
    font-size: 0.75rem;
    line-height: 1.2;
}

.task-info .info-row {
    margin-bottom: 2px;
    display: flex;
    align-items: center;
    flex-wrap: wrap;
}

.task-info .info-row:last-child {
    margin-bottom: 0;
}

.task-info .progress-text {
    font-size: 0.7rem;
    min-width: 28px;
    text-align: right;
}

.task-card .form-select-sm {
    font-size: 0.9rem;
    padding: 0.375rem 0.75rem;
    height: auto;
    min-height: 32px;
}

.task-card .dropdown-toggle {
    padding: 0.375rem 0.75rem;
    font-size: 0.9rem;
    min-height: 32px;
}

.task-card .row {
    min-height: 40px;
}

.task-title-link {
    color: #212529 !important;
    transition: color 0.2s ease;
}

.task-title-link:hover {
    color: #0d6efd !important;
    text-decoration: underline !important;
}

/* 甘特图特有的任务卡片样式 */
.task-card.gantt-task-item {
    cursor: pointer;
}

.task-card.gantt-task-item.active {
    border-left: 4px solid #0d6efd;
    background-color: #e3f2fd;
}

/* 甘特图树形结构样式 */
.gantt-tree-item {
    transition: all 0.2s ease;
}

.tree-toggle {
    transition: all 0.2s ease;
}

.tree-toggle:hover {
    background-color: #e9ecef !important;
}

.tree-children {
    transition: all 0.2s ease;
}

/* 统一甘特图行样式 */
.unified-gantt-row {
    display: flex;
    border-bottom: 1px solid #e9ecef;
    position: relative;
    min-height: 60px;
    align-items: stretch;
    transition: all 0.2s ease;
    min-width: max-content; /* 确保行宽度足够 */
}

.unified-gantt-row:hover {
    background: #f8f9fa;
}

/* 统一甘特图行选中状态 */
.unified-gantt-row.selected {
    background: #e3f2fd !important;
    border-left: 4px solid #2196f3;
    box-shadow: 0 2px 4px rgba(33, 150, 243, 0.2);
}

.unified-gantt-row.selected:hover {
    background: #e3f2fd !important;
}

.unified-gantt-row.selected .task-info-section {
    background: #e3f2fd !important;
}

/* 左侧任务信息区域 */
.task-info-section {
    width: 400px;
    min-width: 400px;
    flex-shrink: 0;
    border-right: 1px solid #e9ecef;
    padding: 0;
    display: flex;
    align-items: center;
    background: #fff;
    position: sticky;
    left: 0;
    z-index: 5;
}

/* 右侧甘特图条区域 */
.gantt-bars-section {
    flex: 1;
    min-width: max-content; /* 确保有足够宽度 */
    position: relative;
    display: flex;
    /* 移除 overflow-x: auto，让父容器控制滚动 */
}

/* 保持原有的甘特图行样式用于兼容 */
.gantt-row {
    display: flex;
    border-bottom: 1px solid #e9ecef;
    position: relative;
}

.gantt-tree-row {
    transition: all 0.2s ease;
}

.gantt-cell {
    flex: 1;
    min-width: 30px;
    border-right: 1px solid #f8f9fa;
}

.gantt-task-bar {
    /* 移除固定背景，让状态颜色生效 */
    border-radius: 4px;
    display: flex;
    align-items: center;
    box-shadow: 0 1px 3px rgba(0,0,0,0.2);
    transition: all 0.2s ease;
}

.gantt-task-bar:hover {
    box-shadow: 0 2px 6px rgba(0,0,0,0.3);
    transform: translateY(-1px);
}

.gantt-task-bar .task-name {
    flex: 1;
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
}

.gantt-tree-children {
    transition: all 0.2s ease;
}

/* 甘特图容器样式 */
#gantt-container {
    overflow-x: auto;
    overflow-y: hidden;
}

#gantt-body {
    min-height: 200px;
}

/* 自定义甘特图样式 */
.gantt-container {
    min-height: 600px;
    overflow-x: auto;
    background: #fff;
    position: relative;
    border: 1px solid #dee2e6;
}

.gantt-header {
    background: #f8f9fa;
    border-bottom: 2px solid #dee2e6;
    position: sticky;
    top: 0;
    z-index: 10;
}

.gantt-timeline {
    display: flex;
    flex-direction: column;
    border-bottom: 1px solid #dee2e6;
    /* 确保时间轴背景覆盖整个内容宽度 */
    min-width: max-content;
    width: max-content;
    background: #f8f9fa;
}

/* 月份行 */
.gantt-timeline-month-row {
    display: flex;
    height: 30px;
    background: #e9ecef;
    border-bottom: 1px solid #dee2e6;
    /* 确保月份行背景覆盖整个宽度 */
    min-width: max-content;
    width: max-content;
}

.gantt-timeline-month-header {
    display: flex;
    align-items: center;
    justify-content: center;
    border-right: 1px solid #dee2e6;
    font-weight: 600;
    font-size: 0.875rem;
    color: #495057;
    flex-shrink: 0; /* 防止被压缩 */
}

/* 周行 */
.gantt-timeline-week-row {
    display: flex;
    height: 30px;
    background: #e9ecef;
    border-bottom: 1px solid #dee2e6;
    min-width: max-content;
    width: max-content;
}

.gantt-timeline-week-header {
    display: flex;
    align-items: center;
    justify-content: center;
    border-right: 1px solid #dee2e6;
    font-weight: 600;
    font-size: 0.875rem;
    color: #495057;
}

.gantt-timeline-week-cell {
    display: flex;
    align-items: center;
    justify-content: center;
    border-right: 1px solid #dee2e6;
    font-weight: 500;
    font-size: 0.8rem;
    color: #495057;
    background: #f8f9fa;
    height: 30px;
}

.gantt-timeline-week-cell.has-today {
    background: #fff3cd;
    color: #856404;
    font-weight: 600;
}

/* 日期行 */
.gantt-timeline-day-row {
    display: flex;
    height: 30px;
    /* 确保日期行背景覆盖整个宽度 */
    min-width: max-content;
    width: max-content;
    background: #f8f9fa;
}

.gantt-timeline-day-cell {
    flex: 1;
    min-width: 70px;
    border-right: 1px solid #dee2e6;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    text-align: center;
    font-size: 0.8rem;
    background: #f8f9fa;
}

.gantt-timeline-day-cell.today {
    background: #fff3cd;
    color: #856404;
    font-weight: 700;
}

.gantt-timeline-day-cell .day-number {
    font-weight: 600;
    font-size: 0.9rem;
}

.gantt-timeline-day-cell .day-week {
    font-size: 0.7rem;
    color: #6c757d;
    margin-top: 2px;
}

/* 兼容旧样式 */
.gantt-timeline-cell {
    flex: 1;
    min-width: 70px;
    border-right: 1px solid #dee2e6;
    display: flex;
    flex-direction: column;
    text-align: center;
    font-size: 0.875rem;
}

.gantt-timeline-month {
    background: #e9ecef;
    padding: 4px;
    font-weight: 600;
    border-bottom: 1px solid #dee2e6;
}

.gantt-timeline-day {
    padding: 8px 4px;
    font-weight: 500;
}

.gantt-timeline-day.today {
    background: #fff3cd;
    color: #856404;
    font-weight: 700;
}

/* 月视图特殊样式 */
.gantt-timeline-month-header.month-view {
    flex-direction: column;
    padding: 8px;
    text-align: center;
}

.gantt-timeline-month-header.month-view.has-today {
    background: #fff3cd;
    color: #856404;
}

.gantt-timeline-month-header .month-year {
    font-size: 0.75rem;
    color: #6c757d;
    margin-bottom: 2px;
}

.gantt-timeline-month-header .month-name {
    font-size: 1rem;
    font-weight: 700;
    margin-bottom: 2px;
}

.gantt-timeline-month-header .month-days {
    font-size: 0.7rem;
    color: #6c757d;
}

/* 兼容旧的月视图样式 */
.gantt-timeline-month-cell {
    display: flex;
    flex-direction: column;
    border-right: 1px solid #dee2e6;
}

.gantt-timeline-days {
    display: flex;
    border-top: 1px solid #dee2e6;
}

.gantt-timeline-days .gantt-timeline-day {
    border-right: 1px solid #e9ecef;
    font-size: 0.75rem;
    padding: 4px 2px;
}

.gantt-body {
    position: relative;
    /* 确保甘特图主体能够容纳所有内容 */
    min-width: 100%;
    width: max-content;
}

.gantt-row {
    display: flex;
    height: 50px;
    border-bottom: 1px solid #e9ecef;
    position: relative;
    /* 确保甘特图行背景和边框覆盖整个宽度 */
    min-width: 100%;
    width: max-content;
}

.gantt-row:hover {
    background: #f8f9fa;
}

/* 右侧甘特图行选中状态 */
.gantt-row.selected {
    background: #e3f2fd !important;
    border-left: 4px solid #2196f3;
    box-shadow: 0 2px 4px rgba(33, 150, 243, 0.2);
}

.gantt-row.selected:hover {
    background: #e3f2fd !important;
}

.gantt-cell {
    flex: 1;
    min-width: 70px;
    border-right: 1px solid #e9ecef;
    position: relative;
}

/* 日视图使用固定宽度 */
.gantt-cell.day-view {
    flex: none;
    width: 70px;
    min-width: 70px;
}

.gantt-timeline-day-cell {
    flex: none;
    width: 70px;
    min-width: 70px;
    text-align: center;
    padding: 5px 2px;
    border-right: 1px solid #e9ecef;
    font-size: 0.875rem;
}

.gantt-task-bar {
    position: absolute;
    height: 30px;
    top: 10px;
    border-radius: 4px;
    display: flex;
    align-items: center;
    padding: 0 8px;
    color: white;
    font-size: 0.8rem;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.2s ease;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
}

.gantt-task-bar:hover {
    transform: translateY(-1px);
    box-shadow: 0 4px 8px rgba(0,0,0,0.15);
}

.gantt-task-bar .task-name {
    flex: 1;
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
}

.gantt-task-bar .task-progress {
    position: absolute;
    left: 0;
    top: 0;
    height: 100%;
    background: rgba(255,255,255,0.3);
    border-radius: 4px;
    transition: width 0.3s ease;
}

.gantt-time-label {
    position: absolute;
    font-size: 0.7rem;
    color: #6c757d;
    background: rgba(255,255,255,0.9);
    padding: 2px 4px;
    border-radius: 2px;
    white-space: nowrap;
}

.gantt-time-label.start {
    left: -50px;
    top: 50%;
    transform: translateY(-50%);
}

.gantt-time-label.end {
    right: -50px;
    top: 50%;
    transform: translateY(-50%);
}

/* 甘特图图例 */
.gantt-legend {
    display: flex;
    gap: 1rem;
    align-items: center;
}

.legend-item {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    font-size: 0.875rem;
}

.legend-color {
    width: 16px;
    height: 16px;
    border-radius: 3px;
    display: inline-block;
}

/* 任务状态颜色 - 优化区分度 (使用 !important 确保优先级) */
.gantt-task-bar.task-draft {
    background-color: #6c757d !important; /* 灰色 - 草稿 */
}

.gantt-task-bar.task-published {
    background-color: #0d6efd !important; /* 亮蓝色 - 已发布 */
}

.gantt-task-bar.task-bidding {
    background-color: #20c997 !important; /* 青绿色 - 竞标中 */
}

.gantt-task-bar.task-assigned {
    background-color: #ffc107 !important; /* 黄色 - 已分配 */
}

.gantt-task-bar.task-in_progress {
    background-color: #f39c12 !important; /* 金黄色 - 进行中 */
}

.gantt-task-bar.task-review {
    background-color: #6f42c1 !important; /* 紫色 - 待审核 */
}

.gantt-task-bar.task-completed {
    background-color: #198754 !important; /* 深绿色 - 已完成 */
}

.gantt-task-bar.task-cancelled {
    background-color: #dc3545 !important; /* 红色 - 已取消 */
}

/* 图例颜色 - 优化区分度 */
.legend-color.task-draft {
    background-color: #6c757d;
}

.legend-color.task-published {
    background-color: #0d6efd;
}

.legend-color.task-bidding {
    background-color: #20c997;
}

.legend-color.task-assigned {
    background-color: #ffc107;
}

.legend-color.task-in_progress {
    background-color: #f39c12;
}

.legend-color.task-review {
    background-color: #6f42c1;
}

.legend-color.task-completed {
    background-color: #198754;
}

.legend-color.task-cancelled {
    background-color: #dc3545;
}

/* 今天线 - 新的实现方式 */
.today-line-marker {
    position: absolute;
    left: 50%;
    top: 0;
    bottom: 0;
    width: 2px;
    background-color: #dc3545;
    transform: translateX(-50%);
    z-index: 10;
    pointer-events: none;
}

/* 在时间轴的今天格子中添加标签 */
.gantt-timeline-day-cell.today .today-line-marker::before {
    content: '今天';
    position: absolute;
    top: -25px;
    left: -15px;
    background-color: #dc3545;
    color: white;
    padding: 2px 6px;
    border-radius: 3px;
    font-size: 0.7rem;
    font-weight: 500;
    white-space: nowrap;
}

/* 保留原有的今天线样式用于兼容 */
.gantt-today-line {
    position: absolute;
    top: 0;
    bottom: 0;
    width: 2px;
    background-color: #dc3545;
    z-index: 50;
    pointer-events: none;
    display: none;
}

/* 自定义甘特图样式以匹配界面风格 */
.gantt-container .grid-header {
    background-color: #f8f9fa;
    border-bottom: 2px solid #dee2e6;
}

.gantt-container .grid-row {
    border-bottom: 1px solid #e9ecef;
}

.gantt-container .grid-row:hover {
    background-color: #f8f9fa;
}

.gantt-container .bar {
    border-radius: 4px;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
}

.gantt-container .bar:hover {
    box-shadow: 0 4px 8px rgba(0,0,0,0.15);
    transform: translateY(-1px);
}

.gantt-container .bar-progress {
    border-radius: 4px;
    background-color: rgba(255,255,255,0.3) !important;
}

.gantt-container .bar-label {
    color: white;
    font-weight: 500;
    text-shadow: 0 1px 2px rgba(0,0,0,0.3);
}

/* Frappe Gantt 今天线样式自定义 */
.gantt .today-highlight {
    background-color: rgba(255, 0, 0, 0.1) !important;
    border-left: 2px solid #dc3545 !important;
}

.gantt .today-line {
    stroke: #dc3545 !important;
    stroke-width: 2px !important;
}

/* 如果Frappe Gantt使用不同的类名 */
.gantt .current-date-line,
.gantt .today-marker {
    stroke: #dc3545 !important;
    stroke-width: 2px !important;
}

.gantt .current-date-highlight,
.gantt .today-column {
    background-color: rgba(255, 0, 0, 0.05) !important;
    border-left: 2px solid #dc3545 !important;
}

/* 时间标签样式 */
.gantt-time-label {
    font-size: 0.7rem;
    color: #6c757d;
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
    white-space: nowrap;
    pointer-events: none;
    background: rgba(255, 255, 255, 0.9);
    padding: 1px 4px;
    border-radius: 2px;
    font-weight: 500;
    z-index: 5;
}

.gantt-time-label.start {
    left: -50px;
}

.gantt-time-label.end {
    right: -50px;
}

/* 甘特图条样式增强 */
.gantt-container .bar {
    position: relative;
}

/* 中文日历样式 */
.gantt-container .grid-header .grid-header-cell {
    font-family: 'Microsoft YaHei', 'PingFang SC', sans-serif;
}

/* 下拉菜单层级修复 - 简单有效的解决方案 */
.dropdown-menu {
    z-index: 1050 !important;
}

/* 当下拉菜单打开时，提升整个任务卡片的层级 */
.gantt-task-item:has(.dropdown.show),
.gantt-task-item.dropdown-active {
    z-index: 1051 !important;
    position: relative;
}

/* 确保下拉菜单容器有足够的层级 */
.gantt-task-item .dropdown.show {
    z-index: 1052 !important;
    position: relative;
}

/* 响应式设计 */
@media (max-width: 768px) {
    .gantt-legend {
        flex-wrap: wrap;
        gap: 0.5rem;
    }

    .legend-item {
        font-size: 0.75rem;
    }

    .btn-group {
        flex-wrap: wrap;
    }
}
</style>

<script>
// 等待页面和库加载完成
window.addEventListener('load', function() {
    // 延迟初始化以确保库完全加载
    setTimeout(function() {
        initGanttChart();
    }, 100);
});

function initGanttChart() {
    // 甘特图数据
    const tasks = <%- JSON.stringify(ganttTasks) %>;

    // 保存到全局变量供其他函数使用
    window.ganttTasks = tasks;

    // 获取迭代数据
    window.sprints = <%- JSON.stringify(sprints || []) %>;
    console.log('迭代数据:', window.sprints);

    // 设置当前用户信息
    window.currentUser = <%- JSON.stringify(user || null) %>;

    if (tasks.length === 0) {
        document.getElementById('unified-gantt-body').innerHTML = '<div class="alert alert-info text-center py-5"><i class="fas fa-info-circle me-2"></i>暂无任务数据，请先创建一些任务</div>';
        return;
    }

    try {
        console.log('开始渲染统一甘特图，任务数量:', tasks.length);

        // 获取用户设置的默认时间粒度
        const userGranularity = '<%= ganttParams && ganttParams.granularity ? ganttParams.granularity : "day" %>';
        const viewModeMap = {
            'day': 'Day',
            'week': 'Week',
            'month': 'Month'
        };
        const defaultViewMode = viewModeMap[userGranularity] || 'Day';

        // 渲染统一甘特图 - 使用用户设置的默认视图
        renderUnifiedGanttChart(tasks, defaultViewMode);

        // 绑定事件监听器
        bindEventListeners();

    } catch (error) {
        console.error('甘特图初始化失败:', error);
        document.getElementById('unified-gantt-body').innerHTML = '<div class="alert alert-danger text-center py-5"><i class="fas fa-exclamation-triangle me-2"></i>甘特图初始化失败: ' + error.message + '</div>';
    }
}

// 当前视图模式 - 默认改为天视图
let currentViewMode = 'Day';

// 渲染统一甘特图
function renderUnifiedGanttChart(tasks, viewMode = 'Day') {
    console.log('开始渲染统一甘特图，视图模式:', viewMode);
    currentViewMode = viewMode;

    // 计算日期范围
    const dateRange = calculateDateRange(tasks, viewMode);
    console.log('日期范围:', dateRange);

    // 渲染时间轴
    renderTimeline(dateRange, viewMode);

    // 渲染统一的任务行（左侧任务信息 + 右侧甘特图条）
    renderUnifiedTaskRows(tasks, dateRange);

    // 设置甘特图容器的最小宽度，确保背景和边框覆盖所有内容
    setGanttContainerWidth(dateRange, viewMode);

    // 渲染今天线
    console.log('准备渲染今天线，dateRange:', dateRange);
    renderTodayLine(dateRange);

    // 初始化交互功能
    initTreeToggle();
    initQuickEdit();

    // 初始化滚动同步
    initScrollSync();
}

// 保持原有函数用于兼容
function renderGanttChart(tasks, viewMode = 'Day') {
    renderUnifiedGanttChart(tasks, viewMode);
}

// 计算日期范围
function calculateDateRange(tasks, viewMode = 'Week') {
    if (tasks.length === 0) return null;

    let minDate = new Date(tasks[0].start);
    let maxDate = new Date(tasks[0].end);

    tasks.forEach(task => {
        const startDate = new Date(task.start);
        const endDate = new Date(task.end);

        if (startDate < minDate) minDate = startDate;
        if (endDate > maxDate) maxDate = endDate;
    });

    let startDate, endDate;

    if (viewMode === 'Day') {
        // 日视图：显示前后3天
        startDate = new Date(minDate);
        startDate.setDate(startDate.getDate() - 3);

        endDate = new Date(maxDate);
        endDate.setDate(endDate.getDate() + 3);
    } else if (viewMode === 'Week') {
        // 周视图：显示前后1周
        startDate = new Date(minDate);
        startDate.setDate(startDate.getDate() - 7);

        endDate = new Date(maxDate);
        endDate.setDate(endDate.getDate() + 7);
    } else if (viewMode === 'Month') {
        // 月视图：显示前后1个月
        startDate = new Date(minDate);
        startDate.setMonth(startDate.getMonth() - 1);

        endDate = new Date(maxDate);
        endDate.setMonth(endDate.getMonth() + 1);
    }

    // 生成日期数组
    const dates = [];
    const currentDate = new Date(startDate);

    while (currentDate <= endDate) {
        dates.push(new Date(currentDate));
        currentDate.setDate(currentDate.getDate() + 1);
    }

    return {
        startDate,
        endDate,
        dates,
        totalDays: dates.length,
        viewMode
    };
}

// 渲染左侧任务列表头部
function renderTaskListHeader(viewMode) {
    const header = document.getElementById('task-list-header');
    header.innerHTML = '';

    // 所有视图模式都使用统一的简单头部
    const headerRow = document.createElement('div');
    headerRow.className = 'task-list-header-row';
    headerRow.style.height = '30px';
    headerRow.style.background = '#e9ecef';
    headerRow.style.borderBottom = '1px solid #dee2e6';
    header.appendChild(headerRow);
}

// 设置甘特图容器宽度
function setGanttContainerWidth(dateRange, viewMode) {
    if (!dateRange) return;

    let totalWidth;

    if (viewMode === 'Day') {
        // 日视图：每天70px固定宽度
        totalWidth = dateRange.totalDays * 70;
    } else {
        // 周视图和月视图：使用默认的flex布局，不设置固定宽度
        return;
    }

    // 设置甘特图相关元素的最小宽度
    const timeline = document.getElementById('gantt-timeline');
    const ganttBody = document.getElementById('gantt-body');

    if (timeline) {
        timeline.style.minWidth = `${totalWidth}px`;
    }

    if (ganttBody) {
        ganttBody.style.minWidth = `${totalWidth}px`;
    }

    console.log(`设置甘特图宽度: ${totalWidth}px (${dateRange.totalDays}天 × 70px)`);
}

// 渲染时间轴
function renderTimeline(dateRange, viewMode = 'Week') {
    const timeline = document.getElementById('gantt-timeline');
    timeline.innerHTML = '';

    const today = new Date();
    const todayStr = today.toISOString().split('T')[0];

    // 根据视图模式决定显示方式
    if (viewMode === 'Month') {
        renderMonthTimeline(dateRange, timeline, todayStr);
    } else {
        renderDayWeekTimeline(dateRange, timeline, todayStr, viewMode);
    }
}

// 渲染月视图时间轴
function renderMonthTimeline(dateRange, timeline, todayStr) {
    // 月视图：只显示月份，不显示具体日期
    const monthGroups = {};
    dateRange.dates.forEach(date => {
        const monthKey = `${date.getFullYear()}-${date.getMonth()}`;
        if (!monthGroups[monthKey]) {
            monthGroups[monthKey] = {
                year: date.getFullYear(),
                month: date.getMonth(),
                dates: [],
                hasToday: false
            };
        }
        monthGroups[monthKey].dates.push(date);

        // 检查这个月是否包含今天
        const dateStr = date.toISOString().split('T')[0];
        if (dateStr === todayStr) {
            monthGroups[monthKey].hasToday = true;
        }
    });

    // 创建单行月份显示
    const monthRow = document.createElement('div');
    monthRow.className = 'gantt-timeline-month-row';
    monthRow.style.height = '30px'; // 统一高度

    Object.values(monthGroups).forEach(monthGroup => {
        const monthCell = document.createElement('div');
        monthCell.className = 'gantt-timeline-month-header month-view';
        monthCell.style.flex = monthGroup.dates.length;
        // 设置最小宽度确保与日期列对齐
        monthCell.style.minWidth = `${monthGroup.dates.length * 70}px`;

        if (monthGroup.hasToday) {
            monthCell.classList.add('has-today');
        }

        monthCell.innerHTML = `
            <div class="month-year">${monthGroup.year}年</div>
            <div class="month-name">${monthGroup.month + 1}月</div>
            <div class="month-days">${monthGroup.dates.length}天</div>
        `;

        monthRow.appendChild(monthCell);
    });

    timeline.appendChild(monthRow);
}

// 渲染日/周视图时间轴
function renderDayWeekTimeline(dateRange, timeline, todayStr, viewMode) {
    if (viewMode === 'Week') {
        renderWeekTimeline(dateRange, timeline, todayStr);
    } else {
        renderDayTimeline(dateRange, timeline, todayStr);
    }
}

// 渲染周视图时间轴
function renderWeekTimeline(dateRange, timeline, todayStr) {
    // 按月分组（上行显示年月）
    const monthGroups = [];
    let currentMonthGroup = null;

    // 按周分组（下行显示第几周）
    const weekGroups = [];
    let currentWeekGroup = null;

    dateRange.dates.forEach((date, index) => {
        // 月份分组
        const monthKey = `${date.getFullYear()}-${date.getMonth()}`;
        if (!currentMonthGroup || currentMonthGroup.key !== monthKey) {
            currentMonthGroup = {
                key: monthKey,
                year: date.getFullYear(),
                month: date.getMonth(),
                dates: [],
                startIndex: index
            };
            monthGroups.push(currentMonthGroup);
        }
        currentMonthGroup.dates.push(date);

        // 周分组
        const weekNumber = getWeekNumber(date);
        const weekKey = `${date.getFullYear()}-W${weekNumber}`;
        if (!currentWeekGroup || currentWeekGroup.key !== weekKey) {
            currentWeekGroup = {
                key: weekKey,
                year: date.getFullYear(),
                weekNumber: weekNumber,
                dates: [],
                startIndex: index
            };
            weekGroups.push(currentWeekGroup);
        }
        currentWeekGroup.dates.push(date);
    });

    // 创建两行结构：月份行和周行
    const monthRow = document.createElement('div');
    monthRow.className = 'gantt-timeline-month-row';

    const weekRow = document.createElement('div');
    weekRow.className = 'gantt-timeline-week-row';

    // 渲染月份行（上行）
    monthGroups.forEach(monthGroup => {
        const monthCell = document.createElement('div');
        monthCell.className = 'gantt-timeline-month-header';
        monthCell.style.flex = monthGroup.dates.length;
        // 设置最小宽度确保与日期列对齐
        monthCell.style.minWidth = `${monthGroup.dates.length * 70}px`;
        monthCell.textContent = `${monthGroup.year}年${monthGroup.month + 1}月`;
        monthRow.appendChild(monthCell);
    });

    // 渲染周行（下行）
    weekGroups.forEach(weekGroup => {
        const weekCell = document.createElement('div');
        weekCell.className = 'gantt-timeline-week-cell';
        weekCell.style.flex = weekGroup.dates.length;

        // 检查这周是否包含今天
        const hasToday = weekGroup.dates.some(date =>
            date.toISOString().split('T')[0] === todayStr
        );

        if (hasToday) {
            weekCell.classList.add('has-today');
        }

        weekCell.textContent = `第${weekGroup.weekNumber}周`;
        weekRow.appendChild(weekCell);
    });

    timeline.appendChild(monthRow);
    timeline.appendChild(weekRow);
}

// 渲染日视图时间轴
function renderDayTimeline(dateRange, timeline, todayStr) {
    // 创建两行结构：月份行和日期行
    const monthRow = document.createElement('div');
    monthRow.className = 'gantt-timeline-month-row';

    const dayRow = document.createElement('div');
    dayRow.className = 'gantt-timeline-day-row';

    // 按月分组
    const monthGroups = [];
    let currentMonthGroup = null;

    dateRange.dates.forEach((date, index) => {
        const monthKey = `${date.getFullYear()}-${date.getMonth()}`;

        if (!currentMonthGroup || currentMonthGroup.key !== monthKey) {
            currentMonthGroup = {
                key: monthKey,
                year: date.getFullYear(),
                month: date.getMonth(),
                dates: [],
                startIndex: index
            };
            monthGroups.push(currentMonthGroup);
        }

        currentMonthGroup.dates.push(date);
    });

    // 渲染月份行
    monthGroups.forEach(monthGroup => {
        const monthCell = document.createElement('div');
        monthCell.className = 'gantt-timeline-month-header';

        // 日视图使用固定宽度，其他视图使用flex
        if (currentViewMode === 'Day') {
            monthCell.style.flex = 'none';
            monthCell.style.width = `${monthGroup.dates.length * 70}px`;
        } else {
            monthCell.style.flex = monthGroup.dates.length;
            monthCell.style.minWidth = `${monthGroup.dates.length * 70}px`;
        }

        monthCell.textContent = `${monthGroup.year}年${monthGroup.month + 1}月`;
        monthRow.appendChild(monthCell);
    });

    // 渲染日期行
    dateRange.dates.forEach(date => {
        const dayCell = document.createElement('div');
        dayCell.className = 'gantt-timeline-day-cell';

        const dateStr = date.toISOString().split('T')[0];
        if (dateStr === todayStr) {
            dayCell.classList.add('today');
        }

        dayCell.textContent = `${date.getDate()}日`;
        dayRow.appendChild(dayCell);
    });

    timeline.appendChild(monthRow);
    timeline.appendChild(dayRow);
}

// 计算一年中的第几周
function getWeekNumber(date) {
    const d = new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate()));
    const dayNum = d.getUTCDay() || 7;
    d.setUTCDate(d.getUTCDate() + 4 - dayNum);
    const yearStart = new Date(Date.UTC(d.getUTCFullYear(), 0, 1));
    return Math.ceil((((d - yearStart) / 86400000) + 1) / 7);
}

// 渲染统一任务行（左侧任务信息 + 右侧甘特图条）
function renderUnifiedTaskRows(tasks, dateRange) {
    const unifiedBody = document.getElementById('unified-gantt-body');
    unifiedBody.innerHTML = '';

    // 构建树形结构
    const taskTree = buildTaskTree(tasks);

    // 渲染统一任务行
    renderUnifiedTaskRowNodes(taskTree, dateRange, unifiedBody, 0);
}

// 渲染任务条 - 支持树形结构（保持兼容）
function renderTaskBars(tasks, dateRange) {
    const ganttBody = document.getElementById('gantt-body');
    if (ganttBody) {
        ganttBody.innerHTML = '';

        // 构建树形结构
        const taskTree = buildTaskTree(tasks);

        // 渲染树形任务条
        renderTaskBarNodes(taskTree, dateRange, ganttBody, 0);
    }
}

// 渲染统一任务行节点
function renderUnifiedTaskRowNodes(nodes, dateRange, container, level) {
    nodes.forEach(task => {
        const hasChildren = task.children && task.children.length > 0;
        const taskData = task.task;
        const assigneeName = taskData.assignee ?
            `${taskData.assignee.firstName || ''} ${taskData.assignee.lastName || ''}`.trim() || taskData.assignee.username :
            '未分配';

        // 创建统一任务行
        const row = document.createElement('div');
        row.className = 'unified-gantt-row';
        row.setAttribute('data-task-id', task.id);
        row.setAttribute('data-level', level);

        // 左侧任务信息区域
        const taskInfoSection = document.createElement('div');
        taskInfoSection.className = 'task-info-section';

        // 创建任务卡片内容（简化版）
        taskInfoSection.innerHTML = `
            <div class="card-body py-1 px-2" style="width: 100%; margin-left: ${level * 20}px;">
                <div class="d-flex align-items-center">
                    ${hasChildren ? `
                        <button class="btn btn-sm btn-outline-secondary tree-toggle me-2"
                                data-task-id="${task.id}"
                                style="width: 24px; height: 24px; padding: 0; font-size: 12px;">
                            <i class="fas fa-chevron-right"></i>
                        </button>
                    ` : `
                        <div style="width: 24px; height: 24px; margin-right: 8px;"></div>
                    `}
                    <span class="badge bg-${getTaskTypeBadgeColor(taskData.taskType)} me-2 task-type-badge">
                        ${getTaskTypeText(taskData.taskType)}
                    </span>
                    <h6 class="card-title mb-0 me-2 text-truncate" style="max-width: 200px;">
                        <a href="/tasks/${taskData.id}" class="text-decoration-none task-title-link">
                            ${task.name}
                        </a>
                    </h6>
                    <span class="badge bg-warning">
                        ${'⭐'.repeat(taskData.starLevel || 0)}
                    </span>
                </div>
            </div>
        `;

        // 右侧甘特图条区域
        const ganttBarsSection = document.createElement('div');
        ganttBarsSection.className = 'gantt-bars-section';

        // 创建每日的单元格
        dateRange.dates.forEach(date => {
            const cell = document.createElement('div');
            cell.className = currentViewMode === 'Day' ? 'gantt-cell day-view' : 'gantt-cell';
            cell.style.height = '100%';
            ganttBarsSection.appendChild(cell);
        });

        // 计算任务条的位置和宽度
        if (task.start && task.end) {
            const startIndex = dateRange.dates.findIndex(date =>
                date.toISOString().split('T')[0] === task.start
            );
            const endIndex = dateRange.dates.findIndex(date =>
                date.toISOString().split('T')[0] === task.end
            );

            if (startIndex >= 0 && endIndex >= 0) {
                const taskBar = document.createElement('div');
                taskBar.className = `gantt-task-bar task-${task.task.status}`;
                taskBar.style.position = 'absolute';

                // 日视图使用固定宽度计算，其他视图使用百分比
                if (currentViewMode === 'Day') {
                    const dayWidth = 70; // 固定日期单元格宽度
                    taskBar.style.left = `${startIndex * dayWidth}px`;
                    taskBar.style.width = `${(endIndex - startIndex + 1) * dayWidth}px`;
                } else {
                    // 周视图和月视图保持原有的百分比计算
                    taskBar.style.left = `${(startIndex / dateRange.totalDays) * 100}%`;
                    taskBar.style.width = `${((endIndex - startIndex + 1) / dateRange.totalDays) * 100}%`;
                }

                taskBar.style.height = '24px';
                taskBar.style.top = '50%';
                taskBar.style.transform = 'translateY(-50%)';
                taskBar.style.borderRadius = '4px';
                taskBar.style.cursor = 'pointer';

                // 根据任务状态设置颜色
                const statusColors = {
                    'draft': '#6c757d',        // 灰色 - 草稿
                    'published': '#0d6efd',    // 亮蓝色 - 已发布
                    'in_progress': '#f39c12',  // 金黄色 - 进行中
                    'review': '#6f42c1',       // 紫色 - 待审核
                    'completed': '#198754',    // 深绿色 - 已完成
                    'cancelled': '#dc3545'     // 红色 - 已取消
                };
                taskBar.style.backgroundColor = statusColors[task.task.status] || '#6c757d';

                // 添加任务名称
                const taskName = document.createElement('span');
                taskName.className = 'task-name';
                taskName.textContent = task.name;
                taskName.style.color = 'white';
                taskName.style.fontSize = '12px';
                taskName.style.fontWeight = '500';
                taskName.style.padding = '0 8px';
                taskName.style.lineHeight = '24px';
                taskName.style.whiteSpace = 'nowrap';
                taskName.style.overflow = 'hidden';
                taskName.style.textOverflow = 'ellipsis';
                taskBar.appendChild(taskName);

                // 添加点击事件
                taskBar.addEventListener('click', (e) => {
                    e.stopPropagation();
                    highlightTask(task.id);
                });

                ganttBarsSection.style.position = 'relative';
                ganttBarsSection.appendChild(taskBar);
            }
        }

        // 组装行
        row.appendChild(taskInfoSection);
        row.appendChild(ganttBarsSection);

        // 添加点击事件
        row.addEventListener('click', () => {
            highlightTask(task.id);
        });

        container.appendChild(row);

        // 渲染子任务（默认隐藏）
        if (hasChildren) {
            const childrenContainer = document.createElement('div');
            childrenContainer.className = 'gantt-tree-children';
            childrenContainer.setAttribute('data-parent-id', task.id);
            childrenContainer.style.display = 'none';

            renderUnifiedTaskRowNodes(task.children, dateRange, childrenContainer, level + 1);
            container.appendChild(childrenContainer);
        }
    });
}

// 渲染树形任务条节点（保持兼容）
function renderTaskBarNodes(nodes, dateRange, container, level) {
    nodes.forEach(task => {
        const hasChildren = task.children && task.children.length > 0;

        // 创建任务行
        const row = document.createElement('div');
        row.className = 'gantt-row gantt-tree-row';
        row.setAttribute('data-task-id', task.id);
        row.setAttribute('data-level', level);
        // 不设置 marginLeft，保持与左侧对齐

        // 设置行高与左侧任务卡片一致
        row.style.height = '60px'; // 与任务卡片高度一致
        row.style.minHeight = '60px';
        row.style.marginBottom = '4px'; // 与任务卡片间距一致
        row.style.cursor = 'pointer'; // 添加鼠标指针样式

        // 添加点击事件
        row.addEventListener('click', () => {
            highlightTask(task.id);
        });

        // 创建每日的单元格
        dateRange.dates.forEach(date => {
            const cell = document.createElement('div');
            cell.className = currentViewMode === 'Day' ? 'gantt-cell day-view' : 'gantt-cell';
            cell.style.height = '100%';
            row.appendChild(cell);
        });

        // 计算任务条的位置和宽度
        if (task.start && task.end) {
            const startIndex = dateRange.dates.findIndex(date =>
                date.toISOString().split('T')[0] === task.start
            );
            const endIndex = dateRange.dates.findIndex(date =>
                date.toISOString().split('T')[0] === task.end
            );

            // 调试信息：检查日期计算
            if (startIndex < 0 || endIndex < 0) {
                console.warn(`任务 ${task.name} 日期超出范围:`, {
                    taskStart: task.start,
                    taskEnd: task.end,
                    startIndex,
                    endIndex,
                    dateRangeStart: dateRange.dates[0]?.toISOString().split('T')[0],
                    dateRangeEnd: dateRange.dates[dateRange.dates.length - 1]?.toISOString().split('T')[0]
                });
            }

            if (startIndex >= 0 && endIndex >= 0) {
                const taskBar = document.createElement('div');
                taskBar.className = `gantt-task-bar task-${task.task.status}`;
                taskBar.style.position = 'absolute';

                // 日视图使用固定宽度计算，其他视图使用百分比
                if (currentViewMode === 'Day') {
                    const dayWidth = 70; // 固定日期单元格宽度
                    taskBar.style.left = `${startIndex * dayWidth}px`;
                    taskBar.style.width = `${(endIndex - startIndex + 1) * dayWidth}px`;
                } else {
                    // 周视图和月视图保持原有的百分比计算
                    taskBar.style.left = `${(startIndex / dateRange.totalDays) * 100}%`;
                    taskBar.style.width = `${((endIndex - startIndex + 1) / dateRange.totalDays) * 100}%`;
                }

                taskBar.style.height = '24px';
                taskBar.style.top = '50%';
                taskBar.style.transform = 'translateY(-50%)';
                taskBar.style.borderRadius = '4px';
                taskBar.style.cursor = 'pointer';

                // 根据任务状态设置颜色 - 优化区分度的颜色映射
                const statusColors = {
                    'draft': '#6c757d',        // 灰色 - 草稿
                    'published': '#0d6efd',    // 亮蓝色 - 已发布
                    'in_progress': '#f39c12',  // 金黄色 - 进行中
                    'review': '#6f42c1',       // 紫色 - 待审核
                    'completed': '#198754',    // 深绿色 - 已完成
                    'cancelled': '#dc3545'     // 红色 - 已取消
                };
                taskBar.style.backgroundColor = statusColors[task.task.status] || '#6c757d';

                // 暂时移除进度条功能，只显示状态颜色
                // TODO: 后续可以根据需要添加实际进度功能

                // 添加任务名称
                const taskName = document.createElement('span');
                taskName.className = 'task-name';
                taskName.textContent = task.name;
                taskName.style.color = 'white';
                taskName.style.fontSize = '12px';
                taskName.style.fontWeight = '500';
                taskName.style.padding = '0 8px';
                taskName.style.lineHeight = '24px';
                taskName.style.whiteSpace = 'nowrap';
                taskName.style.overflow = 'hidden';
                taskName.style.textOverflow = 'ellipsis';
                taskBar.appendChild(taskName);

                // 添加点击事件 - 只保留高亮功能
                taskBar.addEventListener('click', (e) => {
                    e.stopPropagation(); // 阻止事件冒泡到行
                    highlightTask(task.id);
                });

                row.style.position = 'relative';
                row.appendChild(taskBar);
            }
        }

        container.appendChild(row);

        // 渲染子任务（默认隐藏）
        if (hasChildren) {
            const childrenContainer = document.createElement('div');
            childrenContainer.className = 'gantt-tree-children';
            childrenContainer.setAttribute('data-parent-id', task.id);
            childrenContainer.style.display = 'none';

            renderTaskBarNodes(task.children, dateRange, childrenContainer, level + 1);
            container.appendChild(childrenContainer);
        }
    });
}

// 渲染今天线 - 新的实现方式：直接在日期格子内添加线条
function renderTodayLine(dateRange) {
    const today = new Date();
    const todayStr = today.toISOString().split('T')[0];

    console.log('查找今天:', todayStr);
    console.log('日期范围:', dateRange.dates.map(d => d.toISOString().split('T')[0]));

    const todayIndex = dateRange.dates.findIndex(date =>
        date.toISOString().split('T')[0] === todayStr
    );

    console.log('今天的索引:', todayIndex, '总天数:', dateRange.totalDays);

    if (todayIndex >= 0) {
        // 等待DOM渲染完成后再添加今天线
        setTimeout(() => {
            // 先清除之前的今天线
            document.querySelectorAll('.today-line-marker').forEach(el => el.remove());

            // 在时间轴的今天格子中添加标记
            addTodayLineToTimeline(todayIndex);

            // 在每个任务行的今天格子中添加线条
            addTodayLineToTaskRows(todayIndex);

        }, 300);
    } else {
        // 清除今天线
        document.querySelectorAll('.today-line-marker').forEach(el => el.remove());
        console.log('今天不在当前日期范围内');
    }
}

// 在时间轴的今天格子中添加标记
function addTodayLineToTimeline(todayIndex) {
    const timeline = document.getElementById('gantt-timeline');
    if (!timeline) return;

    if (currentViewMode === 'Day') {
        // 日视图：在日期单元格中添加标记
        const dayRow = timeline.querySelector('.gantt-timeline-day-row');
        if (dayRow) {
            const dayCells = dayRow.querySelectorAll('.gantt-timeline-day-cell');
            if (dayCells[todayIndex]) {
                const todayCell = dayCells[todayIndex];

                // 创建今天线标记
                const todayMarker = document.createElement('div');
                todayMarker.className = 'today-line-marker';
                todayMarker.style.cssText = `
                    position: absolute;
                    left: 50%;
                    top: 0;
                    bottom: 0;
                    width: 2px;
                    background-color: #dc3545;
                    transform: translateX(-50%);
                    z-index: 10;
                    pointer-events: none;
                `;

                // 确保单元格有相对定位
                todayCell.style.position = 'relative';
                todayCell.appendChild(todayMarker);

                console.log('在时间轴日期格子中添加了今天线');
            }
        }
    }
}

// 在每个任务行的今天格子中添加线条
function addTodayLineToTaskRows(todayIndex) {
    // 获取所有甘特图行
    const ganttRows = document.querySelectorAll('.unified-gantt-row');

    ganttRows.forEach(row => {
        const ganttBarsSection = row.querySelector('.gantt-bars-section');
        if (ganttBarsSection) {
            const cells = ganttBarsSection.querySelectorAll('.gantt-cell');
            if (cells[todayIndex]) {
                const todayCell = cells[todayIndex];

                // 创建今天线
                const todayLine = document.createElement('div');
                todayLine.className = 'today-line-marker';
                todayLine.style.cssText = `
                    position: absolute;
                    left: 50%;
                    top: 0;
                    bottom: 0;
                    width: 2px;
                    background-color: #dc3545;
                    transform: translateX(-50%);
                    z-index: 5;
                    pointer-events: none;
                `;

                // 确保单元格有相对定位
                todayCell.style.position = 'relative';
                todayCell.appendChild(todayLine);
            }
        }
    });

    console.log(`在 ${ganttRows.length} 个任务行中添加了今天线`);
}

// 滚动到今天的位置
function scrollToToday() {
    const today = new Date();
    const todayStr = today.toISOString().split('T')[0];

    console.log('滚动到今天:', todayStr);

    // 获取甘特图主容器
    const ganttContainer = document.getElementById('unified-gantt-container');
    const ganttBodyContainer = document.querySelector('.unified-gantt-body-container');

    if (!ganttContainer) {
        console.warn('未找到甘特图容器');
        return;
    }

    // 获取当前任务数据来计算日期范围
    const tasks = window.ganttTasks || [];
    if (tasks.length === 0) {
        console.warn('没有任务数据');
        return;
    }

    const dateRange = calculateDateRange(tasks, currentViewMode);
    const todayIndex = dateRange.dates.findIndex(date =>
        date.toISOString().split('T')[0] === todayStr
    );

    console.log('今天的索引:', todayIndex, '总天数:', dateRange.totalDays);

    if (todayIndex >= 0) {
        let scrollLeft = 0;

        if (currentViewMode === 'Day') {
            // 日视图：使用固定宽度计算（每天70px）
            const dayWidth = 70;
            const leftPanelWidth = 400; // 左侧任务列表宽度

            // 计算今天的位置，减去左侧面板宽度
            const todayPosition = todayIndex * dayWidth;

            // 滚动到今天的位置，让今天居中显示
            const containerWidth = ganttContainer.clientWidth;
            const centerOffset = (containerWidth - leftPanelWidth) / 2;
            scrollLeft = todayPosition - centerOffset;

            console.log('日视图滚动计算:', {
                todayIndex,
                dayWidth,
                todayPosition,
                containerWidth,
                centerOffset,
                scrollLeft
            });

        } else if (currentViewMode === 'Week' || currentViewMode === 'Month') {
            // 周视图和月视图：基于百分比计算
            const ganttBarsSection = document.querySelector('.gantt-bars-section');
            if (ganttBarsSection) {
                const totalWidth = ganttBarsSection.scrollWidth;
                const todayPosition = (todayIndex / dateRange.totalDays) * totalWidth;

                const containerWidth = ganttContainer.clientWidth;
                const leftPanelWidth = 400;
                const centerOffset = (containerWidth - leftPanelWidth) / 2;
                scrollLeft = todayPosition - centerOffset;

                console.log('周/月视图滚动计算:', {
                    todayIndex,
                    totalDays: dateRange.totalDays,
                    totalWidth,
                    todayPosition,
                    scrollLeft
                });
            }
        }

        // 确保滚动位置不为负数
        scrollLeft = Math.max(0, scrollLeft);

        // 滚动甘特图主体容器
        if (ganttBodyContainer) {
            ganttBodyContainer.scrollTo({
                left: scrollLeft,
                behavior: 'smooth'
            });
            console.log('滚动甘特图主体容器到位置:', scrollLeft);
        } else {
            // 备用方案：滚动整个甘特图容器
            ganttContainer.scrollTo({
                left: scrollLeft,
                behavior: 'smooth'
            });
            console.log('滚动整个甘特图容器到位置:', scrollLeft);
        }

    } else {
        console.warn('今天不在当前日期范围内');

        // 如果今天不在范围内，提示用户
        alert('今天不在当前甘特图的日期范围内。请调整任务的日期范围或切换到包含今天的视图。');
    }
}

// 等待甘特图完全渲染
function waitForGanttRender(callback, maxAttempts = 20, currentAttempt = 0) {
    if (currentAttempt >= maxAttempts) {
        console.warn('等待甘特图渲染超时，强制执行回调');
        callback();
        return;
    }

    // 检查甘特图是否已经渲染完成
    const ganttContainer = document.querySelector('#gantt-container');
    const ganttSvg = ganttContainer ? ganttContainer.querySelector('svg') : null;
    const ganttBars = ganttContainer ? ganttContainer.querySelectorAll('.bar') : [];
    const ganttHeaders = ganttContainer ? ganttContainer.querySelectorAll('.grid-header-cell') : [];

    console.log(`渲染检查 ${currentAttempt + 1}/${maxAttempts}:`, {
        container: !!ganttContainer,
        svg: !!ganttSvg,
        bars: ganttBars.length,
        headers: ganttHeaders.length,
        containerWidth: ganttContainer ? ganttContainer.offsetWidth : 0
    });

    // 检查甘特图是否已经有内容
    if (ganttContainer &&
        ganttContainer.offsetWidth > 0 &&
        (ganttSvg || ganttBars.length > 0 || ganttHeaders.length > 0)) {

        console.log('甘特图渲染完成，执行回调');
        // 再等一点时间确保完全渲染
        setTimeout(callback, 200);
        return;
    }

    // 如果还没有渲染完成，继续等待
    setTimeout(() => {
        waitForGanttRender(callback, maxAttempts, currentAttempt + 1);
    }, 300);
}

function bindEventListeners() {
    // 视图模式切换
    document.getElementById('viewModeDay').addEventListener('click', function() {
        updateActiveButton(this);
        const tasks = <%- JSON.stringify(ganttTasks) %>;
        renderGanttChart(tasks, 'Day');
        console.log('切换到日视图');
    });

    document.getElementById('viewModeWeek').addEventListener('click', function() {
        updateActiveButton(this);
        const tasks = <%- JSON.stringify(ganttTasks) %>;
        renderGanttChart(tasks, 'Week');
        console.log('切换到周视图');
    });

    document.getElementById('viewModeMonth').addEventListener('click', function() {
        updateActiveButton(this);
        const tasks = <%- JSON.stringify(ganttTasks) %>;
        renderGanttChart(tasks, 'Month');
        console.log('切换到月视图');
    });

    // 今天按钮
    document.getElementById('todayBtn').addEventListener('click', function() {
        scrollToToday();
    });

    // 初始化下拉菜单定位修复
    initDropdownFix();
}

// 更新活动按钮
function updateActiveButton(activeBtn) {
    document.querySelectorAll('.btn-group button').forEach(btn => {
        btn.classList.remove('active');
    });
    activeBtn.classList.add('active');
}

// 渲染任务列表 - 树形结构
function renderTaskList(tasks) {
    const container = document.getElementById('task-list-container');

    if (tasks.length === 0) {
        container.innerHTML = '<div class="alert alert-info text-center py-5"><i class="fas fa-info-circle me-2"></i>暂无任务数据</div>';
        return;
    }

    // 构建树形结构
    const taskTree = buildTaskTree(tasks);

    // 渲染树形任务列表
    const taskListHtml = renderTaskTreeNodes(taskTree, 0);

    container.innerHTML = taskListHtml;

    // 初始化快速编辑功能
    initQuickEdit();

    // 初始化树形展开/折叠功能
    initTreeToggle();
}

// 构建任务树形结构
function buildTaskTree(tasks) {
    const taskMap = new Map();
    const rootTasks = [];

    // 创建任务映射
    tasks.forEach(task => {
        taskMap.set(task.id, {
            ...task,
            children: []
        });
    });

    // 构建父子关系
    tasks.forEach(task => {
        const taskNode = taskMap.get(task.id);
        if (task.task.parentTaskId) {
            const parent = taskMap.get(task.task.parentTaskId);
            if (parent) {
                parent.children.push(taskNode);
            } else {
                // 父任务不在当前列表中，作为根任务处理
                rootTasks.push(taskNode);
            }
        } else {
            rootTasks.push(taskNode);
        }
    });

    return rootTasks;
}

// 检查用户是否有编辑任务的权限
function canEditTask(taskData) {
    const user = window.currentUser;
    if (!user) return false;

    // 管理员始终有权限
    if (user.role === 'admin') {
        return true;
    }
    // 我创建的任务
    if (taskData.publisherId === user.id) {
        return true;
    }
    // 我负责的任务
    if (taskData.assigneeId === user.id) {
        return true;
    }
    // 我审核的任务
    if (taskData.reviewerId === user.id) {
        return true;
    }

    return false;
}

// 渲染树形节点
function renderTaskTreeNodes(nodes, level) {
    return nodes.map(task => {
        const hasChildren = task.children && task.children.length > 0;
        const taskData = task.task;
        const assigneeName = taskData.assignee ?
            `${taskData.assignee.firstName || ''} ${taskData.assignee.lastName || ''}`.trim() || taskData.assignee.username :
            '未分配';

        // 生成当前任务的HTML
        let taskHtml = `
            <div class="card mb-1 task-card gantt-task-item gantt-tree-item"
                 data-task-id="${task.id}"
                 data-level="${level}"
                 onclick="highlightTask('${task.id}')"
                 style="margin-left: ${level * 20}px;">
                <div class="card-body py-1 px-2">
                    <div class="row align-items-center">
                        <!-- 树形展开按钮和任务标题 -->
                        <div class="col-md-3">
                            <div class="d-flex align-items-center">
                                ${hasChildren ? `
                                    <button class="btn btn-sm btn-outline-secondary tree-toggle me-2"
                                            data-task-id="${task.id}"
                                            style="width: 24px; height: 24px; padding: 0; font-size: 12px;">
                                        <i class="fas fa-chevron-right"></i>
                                    </button>
                                ` : `
                                    <div style="width: 24px; height: 24px; margin-right: 8px;"></div>
                                `}
                                <span class="badge bg-${getTaskTypeBadgeColor(taskData.taskType)} me-2 task-type-badge">
                                    ${getTaskTypeText(taskData.taskType)}
                                </span>
                                <h6 class="card-title mb-0 me-2 text-truncate" style="max-width: 120px;">
                                    <a href="/tasks/${taskData.id}" class="text-decoration-none task-title-link">
                                        ${task.name}
                                    </a>
                                </h6>
                                <span class="badge bg-warning">
                                    ${'⭐'.repeat(taskData.starLevel || 0)}
                                </span>
                            </div>
                        </div>

                        <!-- 快速编辑字段 -->
                        <div class="col-md-1">
                            <select class="form-select form-select-sm quick-edit-field"
                                    data-task-id="${taskData.id}"
                                    data-field="status">
                                <option value="draft" ${taskData.status === 'draft' ? 'selected' : ''}>草稿</option>
                                <option value="published" ${taskData.status === 'published' ? 'selected' : ''}>已发布</option>
                                <option value="in_progress" ${taskData.status === 'in_progress' ? 'selected' : ''}>进行中</option>
                                <option value="review" ${taskData.status === 'review' ? 'selected' : ''}>待审核</option>
                                <option value="completed" ${taskData.status === 'completed' ? 'selected' : ''}>已完成</option>
                                <option value="cancelled" ${taskData.status === 'cancelled' ? 'selected' : ''}>已取消</option>
                            </select>
                        </div>
                        <div class="col-md-1">
                            <select class="form-select form-select-sm quick-edit-field"
                                    data-task-id="${taskData.id}"
                                    data-field="assigneeId">
                                <option value="">未分配</option>
                                ${taskData.project && taskData.project.members ?
                                    taskData.project.members.map(member =>
                                        `<option value="${member.id}" ${taskData.assigneeId === member.id ? 'selected' : ''}>
                                            ${(member.firstName + ' ' + member.lastName).trim() || member.username}
                                        </option>`
                                    ).join('') : ''
                                }
                            </select>
                        </div>
                        <div class="col-md-1">
                            <select class="form-select form-select-sm quick-edit-field"
                                    data-task-id="${taskData.id}"
                                    data-field="urgencyLevel">
                                <option value="urgent" ${taskData.urgencyLevel === 'urgent' ? 'selected' : ''}>🔥 紧急</option>
                                <option value="important" ${taskData.urgencyLevel === 'important' ? 'selected' : ''}>⚡ 重要</option>
                                <option value="normal" ${taskData.urgencyLevel === 'normal' ? 'selected' : ''}>📅 普通</option>
                                <option value="delayed" ${taskData.urgencyLevel === 'delayed' ? 'selected' : ''}>🕐 延期</option>
                                <option value="frozen" ${taskData.urgencyLevel === 'frozen' ? 'selected' : ''}>❄️ 冻结</option>
                            </select>
                        </div>
                        <div class="col-md-1">
                            <select class="form-select form-select-sm quick-edit-field"
                                    data-task-id="${taskData.id}"
                                    data-field="sprintId">
                                <option value="">未分配</option>
                                ${window.sprints && window.sprints.length > 0 ?
                                    window.sprints.map(sprint =>
                                        `<option value="${sprint.id}" ${taskData.sprintId === sprint.id ? 'selected' : ''}>
                                            ${sprint.name}
                                        </option>`
                                    ).join('') : ''
                                }
                            </select>
                        </div>

                        <!-- 任务信息 -->
                        <div class="col-md-2">
                            <small class="text-muted task-info">
                                <!-- 第一行：创建人 -->
                                <div class="info-row">
                                    <i class="fas fa-user me-1"></i>
                                    <span>${taskData.publisher ? (taskData.publisher.firstName + ' ' + taskData.publisher.lastName).trim() || taskData.publisher.username : '未知'}</span>
                                </div>

                                <!-- 第二行：工时信息 -->
                                <div class="info-row">
                                    ${taskData.estimatedHours ? `<i class="fas fa-clock me-1"></i><span>预计 ${taskData.estimatedHours}h</span>` : ''}
                                    ${taskData.actualHours ? `<span class="ms-2"><i class="fas fa-stopwatch me-1"></i>实际 ${taskData.actualHours}h</span>` : ''}
                                </div>

                                <!-- 第三行：时间信息 -->
                                <div class="info-row">
                                    ${taskData.startDate ? `<i class="fas fa-play me-1"></i><span>${new Date(taskData.startDate).toLocaleDateString('zh-CN')}</span>` : ''}
                                    ${taskData.dueDate ? `<span class="${taskData.startDate ? 'ms-2' : ''}"><i class="fas fa-flag me-1"></i>${new Date(taskData.dueDate).toLocaleDateString('zh-CN')}</span>` : ''}
                                </div>

                                <!-- 第四行：进度条 -->
                                <div class="info-row mt-1">
                                    <div class="d-flex align-items-center w-100">
                                        <i class="fas fa-chart-line me-1"></i>
                                        <div class="progress flex-grow-1 me-2" style="height: 6px;">
                                            <div class="progress-bar
                                                ${taskData.progress === 0 ? 'bg-secondary' :
                                                  taskData.progress < 25 ? 'bg-info' :
                                                  taskData.progress < 50 ? 'bg-primary' :
                                                  taskData.progress < 75 ? 'bg-warning' :
                                                  taskData.progress < 100 ? 'bg-success' : 'bg-success'}"
                                                role="progressbar"
                                                style="width: ${taskData.progress || 0}%;"
                                                aria-valuenow="${taskData.progress || 0}"
                                                aria-valuemin="0"
                                                aria-valuemax="100">
                                            </div>
                                        </div>
                                        <span class="text-nowrap progress-text">${taskData.progress || 0}%</span>
                                    </div>
                                </div>
                            </small>
                        </div>

                        <!-- 操作按钮 -->
                        <div class="col-md-1 text-end">
                            <div class="dropdown">
                                <button class="btn btn-outline-secondary btn-sm dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                                    <i class="fas fa-ellipsis-h"></i>
                                </button>
                                <ul class="dropdown-menu">
                                    <li><a class="dropdown-item" href="/tasks/${taskData.id}">
                                        <i class="fas fa-eye me-2"></i>查看详情
                                    </a></li>
                                    <li><a class="dropdown-item" href="/tasks/create?parent=${taskData.id}">
                                        <i class="fas fa-plus me-2"></i>添加子任务
                                    </a></li>
                                    ${canEditTask(taskData) ? `
                                        <li><hr class="dropdown-divider"></li>
                                        <li><a class="dropdown-item" href="/tasks/${taskData.id}/edit">
                                            <i class="fas fa-edit me-2"></i>编辑
                                        </a></li>
                                        ${taskData.isArchived ?
                                            `<li><a class="dropdown-item text-info" href="#" onclick="toggleArchiveTask('${taskData.id}', false)">
                                                <i class="fas fa-box-open me-2"></i>取消归档
                                            </a></li>` :
                                            `<li><a class="dropdown-item text-warning" href="#" onclick="toggleArchiveTask('${taskData.id}', true)">
                                                <i class="fas fa-archive me-2"></i>归档
                                            </a></li>`
                                        }
                                        <li><a class="dropdown-item text-danger" href="#" onclick="deleteTask('${taskData.id}', '${task.name}')">
                                            <i class="fas fa-trash me-2"></i>删除
                                        </a></li>
                                    ` : ''}
                                </ul>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        `;

        // 添加子任务（默认隐藏）
        if (hasChildren) {
            const childrenHtml = renderTaskTreeNodes(task.children, level + 1);
            taskHtml += `
                <div class="tree-children" data-parent-id="${task.id}" style="display: none;">
                    ${childrenHtml}
                </div>
            `;
        }

        return taskHtml;
    }).join('');
}

// 初始化树形展开/折叠功能
function initTreeToggle() {
    // 绑定展开/折叠按钮事件
    $(document).off('click', '.tree-toggle').on('click', '.tree-toggle', function(e) {
        e.stopPropagation(); // 阻止事件冒泡

        const $button = $(this);
        const taskId = $button.data('task-id');
        const $icon = $button.find('i');

        // 查找子任务容器（兼容新旧布局）
        const $taskChildren = $(`.tree-children[data-parent-id="${taskId}"]`);
        const $ganttChildren = $(`.gantt-tree-children[data-parent-id="${taskId}"]`);

        // 检查是否当前可见
        const isVisible = $taskChildren.is(':visible') || $ganttChildren.is(':visible');

        if (isVisible) {
            // 折叠
            $taskChildren.slideUp(200);
            $ganttChildren.slideUp(200);
            $icon.removeClass('fa-chevron-down').addClass('fa-chevron-right');
        } else {
            // 展开
            $taskChildren.slideDown(200);
            $ganttChildren.slideDown(200);
            $icon.removeClass('fa-chevron-right').addClass('fa-chevron-down');
        }
    });
}

// 初始化滚动同步
function initScrollSync() {
    const timelineContainer = document.querySelector('.gantt-timeline-container');
    const bodyContainer = document.querySelector('.unified-gantt-body-container');

    if (!timelineContainer || !bodyContainer) {
        console.warn('滚动同步初始化失败：找不到容器元素');
        return;
    }

    let isScrolling = false;

    // 主体容器滚动时，同步时间轴容器的水平滚动
    bodyContainer.addEventListener('scroll', function() {
        if (isScrolling) return;
        isScrolling = true;

        // 同步时间轴的水平滚动
        timelineContainer.scrollLeft = bodyContainer.scrollLeft;

        setTimeout(() => { isScrolling = false; }, 10);
    });

    console.log('滚动同步已初始化');
}

// 初始化下拉菜单定位修复
function initDropdownFix() {
    // 监听所有下拉菜单的显示事件
    $(document).on('show.bs.dropdown', '.gantt-task-item .dropdown', function(e) {
        const $dropdown = $(this);
        const $toggle = $dropdown.find('.dropdown-toggle');
        const $menu = $dropdown.find('.dropdown-menu');

        // 标记任务卡片为活动状态，提升z-index
        $dropdown.closest('.gantt-task-item').addClass('dropdown-active');

        // 简化定位逻辑，让Bootstrap自己处理定位
        // 只需要确保z-index足够高
        setTimeout(() => {
            $menu.css({
                zIndex: 10000
            });
        }, 0);
    });

    // 监听下拉菜单的隐藏事件
    $(document).on('hide.bs.dropdown', '.gantt-task-item .dropdown', function(e) {
        const $dropdown = $(this);

        // 移除任务卡片的活动状态
        $dropdown.closest('.gantt-task-item').removeClass('dropdown-active');
    });
}

// 初始化快速编辑功能
function initQuickEdit() {
    // 初始化快速编辑字段，保存原始值
    $('.quick-edit-field').each(function() {
        const $select = $(this);
        $select.data('original-value', $select.val());
    });

    // 快速编辑字段处理
    $(document).off('change', '.quick-edit-field').on('change', '.quick-edit-field', function() {
        const $select = $(this);
        const taskId = $select.data('task-id');
        const field = $select.data('field');
        const value = $select.val();
        const originalValue = $select.data('original-value');

        console.log('快速编辑触发:', { taskId, field, value, originalValue });

        // 禁用选择框并显示加载状态
        $select.prop('disabled', true);
        $select.addClass('loading');

        // 发送AJAX请求
        $.ajax({
            url: `/tasks/${taskId}/quick-update`,
            method: 'POST',
            dataType: 'json',
            headers: {
                'Accept': 'application/json',
                'Content-Type': 'application/x-www-form-urlencoded'
            },
            data: {
                field: field,
                value: value
            },
            success: function(response) {
                console.log('AJAX成功响应:', response);
                if (response.success) {
                    // 显示成功提示
                    showToast('success', response.message);
                    // 更新原始值
                    $select.data('original-value', value);
                } else {
                    // 恢复原始值
                    $select.val($select.data('original-value'));
                    showToast('error', response.message || '更新失败');
                }
            },
            error: function(xhr, status, error) {
                console.error('AJAX错误:', { xhr, status, error });
                console.error('响应文本:', xhr.responseText);
                // 恢复原始值
                $select.val($select.data('original-value'));
                const errorMsg = xhr.responseJSON?.message || `网络错误：${error}`;
                showToast('error', errorMsg);
            },
            complete: function() {
                // 恢复选择框状态
                $select.prop('disabled', false);
                $select.removeClass('loading');
            }
        });
    });
}

// 显示提示消息
function showToast(type, message) {
    // 创建提示元素
    const toast = $(`
        <div class="toast align-items-center text-white bg-${type === 'success' ? 'success' : 'danger'} border-0" role="alert" aria-live="assertive" aria-atomic="true">
            <div class="d-flex">
                <div class="toast-body">
                    <i class="fas fa-${type === 'success' ? 'check' : 'exclamation-triangle'} me-2"></i>
                    ${message}
                </div>
                <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
            </div>
        </div>
    `);

    // 添加到页面
    let toastContainer = $('#toast-container');
    if (toastContainer.length === 0) {
        toastContainer = $('<div id="toast-container" class="toast-container position-fixed top-0 end-0 p-3" style="z-index: 1055;"></div>');
        $('body').append(toastContainer);
    }

    toastContainer.append(toast);

    // 显示提示
    const bsToast = new bootstrap.Toast(toast[0]);
    bsToast.show();

    // 自动移除
    toast.on('hidden.bs.toast', function() {
        $(this).remove();
    });
}

// 归档/取消归档任务函数
function toggleArchiveTask(taskId, isArchive) {
    const action = isArchive ? '归档' : '取消归档';
    const confirmMessage = isArchive
        ? '确定要归档此任务吗？\n\n归档后的任务将从常规视图中隐藏，需要在筛选器中选择"已归档"才能查看。'
        : '确定要取消归档此任务吗？\n\n取消归档后的任务将重新显示在常规视图中。';

    if (confirm(confirmMessage)) {
        const url = isArchive ? `/tasks/${taskId}/archive` : `/tasks/${taskId}/unarchive`;

        // 发送AJAX请求
        $.ajax({
            url: url,
            method: 'POST',
            dataType: 'json',
            headers: {
                'Accept': 'application/json',
                'Content-Type': 'application/x-www-form-urlencoded'
            },
            success: function(response) {
                if (response.success) {
                    showToast('success', response.message);
                    // 刷新页面以更新任务列表
                    setTimeout(() => {
                        window.location.reload();
                    }, 1000);
                } else {
                    showToast('error', response.message || `${action}失败`);
                }
            },
            error: function(xhr, status, error) {
                console.error('归档操作错误:', { xhr, status, error });
                const errorMsg = xhr.responseJSON?.message || `${action}失败：${error}`;
                showToast('error', errorMsg);
            }
        });
    }
}

// 删除任务函数
function deleteTask(taskId, taskTitle) {
    if (confirm(`确定要删除任务"${taskTitle}"吗？\n\n此操作不可撤销，任务的所有相关数据都将被删除。`)) {
        // 创建表单并提交
        const form = document.createElement('form');
        form.method = 'POST';
        form.action = `/tasks/${taskId}/delete`;

        // 添加CSRF token（如果需要）
        const csrfToken = document.querySelector('meta[name="csrf-token"]');
        if (csrfToken) {
            const csrfInput = document.createElement('input');
            csrfInput.type = 'hidden';
            csrfInput.name = '_token';
            csrfInput.value = csrfToken.getAttribute('content');
            form.appendChild(csrfInput);
        }

        document.body.appendChild(form);
        form.submit();
    }
}

// 高亮任务 - 统一布局联动
function highlightTask(taskId) {
    // 清除所有高亮
    document.querySelectorAll('.gantt-task-item').forEach(item => {
        item.classList.remove('active');
    });
    document.querySelectorAll('.gantt-row').forEach(row => {
        row.classList.remove('selected');
    });
    document.querySelectorAll('.unified-gantt-row').forEach(row => {
        row.classList.remove('selected');
    });

    // 高亮统一甘特图中的任务行
    const unifiedTaskRow = document.querySelector(`.unified-gantt-row[data-task-id="${taskId}"]`);
    if (unifiedTaskRow) {
        unifiedTaskRow.classList.add('selected');
    }

    // 兼容旧布局：高亮左侧任务列表中的任务
    const leftTaskItem = document.querySelector(`.gantt-task-item[data-task-id="${taskId}"]`);
    if (leftTaskItem) {
        leftTaskItem.classList.add('active');
    }

    // 兼容旧布局：高亮右侧甘特图中的任务行
    const rightTaskRow = document.querySelector(`.gantt-row[data-task-id="${taskId}"]`);
    if (rightTaskRow) {
        rightTaskRow.classList.add('selected');
    }
}

// 格式化日期
function formatDate(dateStr) {
    const date = new Date(dateStr);
    return `${date.getMonth() + 1}/${date.getDate()}`;
}

// 格式化中文日期
function formatDateChinese(dateStr) {
    const date = new Date(dateStr);
    const months = ['1月', '2月', '3月', '4月', '5月', '6月', '7月', '8月', '9月', '10月', '11月', '12月'];
    return `${months[date.getMonth()]}${date.getDate()}日`;
}

// 不再需要的函数，已集成到自定义甘特图中
// 添加时间标签
function addTimeLabels(tasks) {
    setTimeout(() => {
        // 移除已存在的时间标签
        const existingLabels = document.querySelectorAll('.gantt-time-label');
        existingLabels.forEach(label => label.remove());

        // 尝试多种选择器找到甘特图条
        const bars = document.querySelectorAll('#gantt-container .bar') ||
                    document.querySelectorAll('.gantt-container .bar') ||
                    document.querySelectorAll('.bar');

        console.log('找到的甘特图条数量:', bars.length, '任务数量:', tasks.length);

        bars.forEach((bar, index) => {
            if (tasks[index]) {
                const task = tasks[index];

                // 清除该条上已有的时间标签
                const existingLabelsInBar = bar.querySelectorAll('.gantt-time-label');
                existingLabelsInBar.forEach(label => label.remove());

                // 确保bar有相对定位
                bar.style.position = 'relative';

                // 添加开始时间标签
                const startLabel = document.createElement('div');
                startLabel.className = 'gantt-time-label start';
                startLabel.textContent = formatDate(task.start);
                startLabel.style.position = 'absolute';
                startLabel.style.left = '-50px';
                startLabel.style.top = '50%';
                startLabel.style.transform = 'translateY(-50%)';
                startLabel.style.fontSize = '0.7rem';
                startLabel.style.color = '#6c757d';
                startLabel.style.whiteSpace = 'nowrap';
                startLabel.style.background = 'rgba(255, 255, 255, 0.9)';
                startLabel.style.padding = '1px 4px';
                startLabel.style.borderRadius = '2px';
                startLabel.style.zIndex = '5';
                bar.appendChild(startLabel);

                // 添加结束时间标签
                const endLabel = document.createElement('div');
                endLabel.className = 'gantt-time-label end';
                endLabel.textContent = formatDate(task.end);
                endLabel.style.position = 'absolute';
                endLabel.style.right = '-50px';
                endLabel.style.top = '50%';
                endLabel.style.transform = 'translateY(-50%)';
                endLabel.style.fontSize = '0.7rem';
                endLabel.style.color = '#6c757d';
                endLabel.style.whiteSpace = 'nowrap';
                endLabel.style.background = 'rgba(255, 255, 255, 0.9)';
                endLabel.style.padding = '1px 4px';
                endLabel.style.borderRadius = '2px';
                endLabel.style.zIndex = '5';
                bar.appendChild(endLabel);

                console.log(`为任务 ${index} 添加了时间标签:`, task.start, '-', task.end);
            }
        });
    }, 1000);
}

// 强制应用任务状态颜色
function applyTaskColors(tasks) {
    console.log('开始应用任务状态颜色...');

    // 多次尝试应用颜色，确保甘特图完全渲染
    let attempts = 0;
    const maxAttempts = 10;

    function tryApplyColors() {
        attempts++;

        // 尝试多种选择器找到甘特图条
        let bars = document.querySelectorAll('#gantt-container .bar');
        if (bars.length === 0) {
            bars = document.querySelectorAll('#gantt-container rect.bar');
        }
        if (bars.length === 0) {
            bars = document.querySelectorAll('#gantt-container .gantt-bar');
        }
        if (bars.length === 0) {
            bars = document.querySelectorAll('#gantt-container rect');
        }

        console.log(`第${attempts}次尝试应用颜色，找到${bars.length}个甘特图条`);
        console.log('甘特图容器内容:', document.querySelector('#gantt-container').innerHTML.substring(0, 200));

        if (bars.length === 0 && attempts < maxAttempts) {
            setTimeout(tryApplyColors, 200);
            return;
        }

        bars.forEach((bar, index) => {
            if (tasks[index]) {
                const task = tasks[index];
                const status = task.task ? task.task.status : task.status;

                // 定义颜色映射
                const colorMap = {
                    'published': '#007bff',    // 蓝色 - 待接单
                    'assigned': '#ffc107',     // 黄色 - 进行中
                    'in_progress': '#ffc107',  // 黄色 - 进行中
                    'review': '#17a2b8',       // 青色 - 待审核
                    'completed': '#28a745'     // 绿色 - 已完成
                };

                const color = colorMap[status] || '#6c757d';

                console.log(`处理任务 ${index}:`, {
                    status: status,
                    color: color,
                    element: bar.tagName,
                    classes: bar.className
                });

                // 根据元素类型设置颜色
                if (bar.tagName === 'rect' || bar.tagName === 'RECT') {
                    // SVG rect元素
                    bar.setAttribute('fill', color);
                    bar.style.fill = color;
                } else {
                    // HTML元素
                    bar.style.backgroundColor = color;
                    bar.style.background = color;
                }

                // 设置进度条内部的进度颜色
                const progressBar = bar.querySelector('.bar-progress') ||
                                  bar.querySelector('rect.bar-progress');
                if (progressBar) {
                    if (progressBar.tagName === 'rect' || progressBar.tagName === 'RECT') {
                        progressBar.setAttribute('fill', 'rgba(255,255,255,0.3)');
                        progressBar.style.fill = 'rgba(255,255,255,0.3)';
                    } else {
                        progressBar.style.backgroundColor = 'rgba(255,255,255,0.3)';
                        progressBar.style.background = 'rgba(255,255,255,0.3)';
                    }
                }

                // 添加CSS类和属性用于后续识别
                bar.classList.add(`task-${status}`);
                bar.setAttribute('data-status', status);
            }
        });

        // 如果还有更多尝试机会，继续尝试
        if (attempts < maxAttempts) {
            setTimeout(tryApplyColors, 300);
        }
    }

    // 立即开始第一次尝试
    tryApplyColors();
}

// 格式化日期
function formatDate(dateStr) {
    const date = new Date(dateStr);
    return `${date.getMonth() + 1}/${date.getDate()}`;
}

// 格式化中文日期
function formatDateChinese(dateStr) {
    const date = new Date(dateStr);
    const months = ['1月', '2月', '3月', '4月', '5月', '6月', '7月', '8月', '9月', '10月', '11月', '12月'];
    return `${months[date.getMonth()]}${date.getDate()}日`;
}

// 自定义中文日历显示
function customizeChineseCalendar() {
    setTimeout(() => {
        try {
            // 替换月份显示
            const headerCells = document.querySelectorAll('#gantt-container .grid-header .grid-header-cell');
            headerCells.forEach(cell => {
                const text = cell.textContent.trim();

                // 替换英文月份为中文
                const monthMap = {
                    'January': '1月', 'Jan': '1月',
                    'February': '2月', 'Feb': '2月',
                    'March': '3月', 'Mar': '3月',
                    'April': '4月', 'Apr': '4月',
                    'May': '5月',
                    'June': '6月', 'Jun': '6月',
                    'July': '7月', 'Jul': '7月',
                    'August': '8月', 'Aug': '8月',
                    'September': '9月', 'Sep': '9月',
                    'October': '10月', 'Oct': '10月',
                    'November': '11月', 'Nov': '11月',
                    'December': '12月', 'Dec': '12月'
                };

                // 替换星期显示
                const dayMap = {
                    'Monday': '周一', 'Mon': '周一',
                    'Tuesday': '周二', 'Tue': '周二',
                    'Wednesday': '周三', 'Wed': '周三',
                    'Thursday': '周四', 'Thu': '周四',
                    'Friday': '周五', 'Fri': '周五',
                    'Saturday': '周六', 'Sat': '周六',
                    'Sunday': '周日', 'Sun': '周日'
                };

                let newText = text;

                // 替换月份
                Object.keys(monthMap).forEach(eng => {
                    newText = newText.replace(new RegExp(eng, 'gi'), monthMap[eng]);
                });

                // 替换星期
                Object.keys(dayMap).forEach(eng => {
                    newText = newText.replace(new RegExp(eng, 'gi'), dayMap[eng]);
                });

                // 处理年份显示
                newText = newText.replace(/(\d{4})/g, '$1年');

                if (newText !== text) {
                    cell.textContent = newText;
                }
            });

            // 替换今天按钮的文本
            const todayButtons = document.querySelectorAll('#gantt-container .gantt-today');
            todayButtons.forEach(btn => {
                if (btn.textContent.toLowerCase().includes('today')) {
                    btn.textContent = '今天';
                }
            });

        } catch (error) {
            console.warn('中文日历自定义失败:', error);
        }
    }, 800);
}

// 设置DOM观察器来监控甘特图变化
function setupGanttObserver() {
    const ganttContainer = document.getElementById('gantt-container');
    if (!ganttContainer) return;

    // 创建观察器实例
    const observer = new MutationObserver(function(mutations) {
        let shouldUpdate = false;

        mutations.forEach(function(mutation) {
            // 检查是否有新的节点添加
            if (mutation.type === 'childList' && mutation.addedNodes.length > 0) {
                for (let node of mutation.addedNodes) {
                    if (node.nodeType === Node.ELEMENT_NODE) {
                        // 检查是否是甘特图相关的元素
                        if (node.classList && (
                            node.classList.contains('grid-header') ||
                            node.classList.contains('grid-header-cell') ||
                            node.querySelector && node.querySelector('.grid-header-cell')
                        )) {
                            shouldUpdate = true;
                            break;
                        }
                    }
                }
            }
        });

        if (shouldUpdate) {
            // 延迟执行以确保DOM完全更新
            setTimeout(() => {
                customizeChineseCalendar();
            }, 100);
        }
    });

    // 开始观察
    observer.observe(ganttContainer, {
        childList: true,
        subtree: true
    });

    // 保存观察器引用以便后续清理
    window.ganttObserver = observer;
}

// 获取状态样式类
function getStatusClass(status) {
    const classMap = {
        'draft': 'bg-secondary text-white',
        'published': 'bg-primary text-white',
        'in_progress': 'bg-warning text-dark',
        'review': 'bg-info text-white',
        'completed': 'bg-success text-white',
        'cancelled': 'bg-danger text-white'
    };
    return classMap[status] || 'bg-secondary text-white';
}

// 获取状态文本
function getStatusText(status) {
    const statusMap = {
        'draft': '草稿',
        'published': '已发布',
        'in_progress': '进行中',
        'review': '待审核',
        'completed': '已完成',
        'cancelled': '已取消'
    };
    return statusMap[status] || status;
}

// 显示任务详情
function showTaskDetail(task) {
    const modal = new bootstrap.Modal(document.getElementById('taskDetailModal'));
    const content = document.getElementById('taskDetailContent');
    const viewBtn = document.getElementById('viewTaskBtn');

    // 设置任务详情内容
    content.innerHTML = `
        <div class="row">
            <div class="col-lg-8 col-md-7">
                <div class="mb-4">
                    <h5 class="mb-3">${task.title}</h5>
                    <div class="text-muted mb-3 rich-text-content">${task.description || '暂无描述'}</div>
                </div>

                <div class="row g-3 mb-4">
                    <div class="col-sm-6 col-md-4">
                        <div class="info-item">
                            <label class="form-label text-muted mb-1">任务类型</label>
                            <div class="fw-medium">${getTaskTypeText(task.taskType)}</div>
                        </div>
                    </div>
                    <div class="col-sm-6 col-md-4">
                        <div class="info-item">
                            <label class="form-label text-muted mb-1">状态</label>
                            <div class="fw-medium">
                                <span class="badge ${getStatusClass(task.status)}">${getStatusText(task.status)}</span>
                            </div>
                        </div>
                    </div>
                    <div class="col-sm-6 col-md-4">
                        <div class="info-item">
                            <label class="form-label text-muted mb-1">星级</label>
                            <div class="fw-medium">${'⭐'.repeat(task.starLevel)}</div>
                        </div>
                    </div>

                    ${task.estimatedHours ? `
                    <div class="col-sm-6 col-md-4">
                        <div class="info-item">
                            <label class="form-label text-muted mb-1">预估工时</label>
                            <div class="fw-medium">${task.estimatedHours} 小时</div>
                        </div>
                    </div>
                    ` : ''}
                    <div class="col-sm-6 col-md-4">
                        <div class="info-item">
                            <label class="form-label text-muted mb-1">截止时间</label>
                            <div class="fw-medium">${task.dueDate ? formatDateChinese(task.dueDate.split('T')[0]) : '未设置'}</div>
                        </div>
                    </div>
                </div>

                ${task.publisher || task.assignee ? `
                <div class="row g-3">
                    ${task.publisher ? `
                    <div class="col-sm-6">
                        <div class="info-item">
                            <label class="form-label text-muted mb-1">发布者</label>
                            <div class="fw-medium">${task.publisher.firstName || ''} ${task.publisher.lastName || ''} (${task.publisher.username})</div>
                        </div>
                    </div>
                    ` : ''}
                    ${task.assignee ? `
                    <div class="col-sm-6">
                        <div class="info-item">
                            <label class="form-label text-muted mb-1">负责人</label>
                            <div class="fw-medium">${task.assignee.firstName || ''} ${task.assignee.lastName || ''} (${task.assignee.username})</div>
                        </div>
                    </div>
                    ` : ''}
                </div>
                ` : ''}
            </div>
            <div class="col-lg-4 col-md-5">
                <div class="card bg-light h-100">
                    <div class="card-header bg-info text-white">
                        <h6 class="mb-0"><i class="fas fa-clock me-2"></i>工时信息</h6>
                    </div>
                    <div class="card-body">
                        <div class="time-item mb-3">
                            <div class="d-flex justify-content-between align-items-center">
                                <span class="text-muted">预估工时</span>
                                <span class="fw-bold text-primary">${task.estimatedHours || 0} 小时</span>
                            </div>
                        </div>
                        ${task.actualHours ? `
                        <div class="time-item mb-3">
                            <div class="d-flex justify-content-between align-items-center">
                                <span class="text-muted">实际工时</span>
                                <span class="fw-bold text-warning">${task.actualHours} 小时</span>
                            </div>
                        </div>
                        <hr>
                        <div class="time-item">
                            <div class="d-flex justify-content-between align-items-center">
                                <span class="fw-medium">工时效率</span>
                                <span class="fw-bold ${task.actualHours <= task.estimatedHours ? 'text-success' : 'text-danger'} fs-5">
                                    ${task.estimatedHours > 0 ? Math.round((task.estimatedHours / task.actualHours) * 100) : 0}%
                                </span>
                            </div>
                        </div>
                        ` : `
                        <div class="text-center text-muted">
                            <i class="fas fa-hourglass-start fa-2x mb-2"></i>
                            <p class="mb-0">任务进行中</p>
                        </div>
                        `}
                    </div>
                </div>
            </div>
        </div>
    `;

    // 设置查看详情按钮链接
    viewBtn.href = `/tasks/${task.id}`;

    modal.show();
}

// 辅助函数
function getTaskTypeText(type) {
    const typeMap = {
        'requirement': '📋 需求',
        'task': '📝 任务',
        'bug': '🐛 缺陷',
        'epic': '🏰 史诗',
        'story': '📖 故事',
        'dev_task': '⚔️ 开发',
        'design_task': '🎨 设计',
        'test_task': '🏹 测试',
        'devops_task': '⚙️ 运维'
    };
    return typeMap[type] || type;
}

// 任务类型徽章颜色映射
function getTaskTypeBadgeColor(taskType) {
    const colorMap = {
        'requirement': 'info',
        'task': 'secondary',
        'bug': 'danger',
        'epic': 'purple',
        'story': 'primary',
        'dev_task': 'primary',
        'design_task': 'success',
        'test_task': 'warning',
        'devops_task': 'dark'
    };
    return colorMap[taskType] || 'secondary';
}




</script>

<%- include('../partials/footer') %>
