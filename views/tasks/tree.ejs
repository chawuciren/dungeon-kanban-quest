<%- include('../partials/header', { title: title }) %>

<%- include('../partials/task-header', {
    pageTitle: '‰ªªÂä°Ê†ëÂΩ¢ËßÜÂõæ',
    currentView: 'tree',
    currentPath: '/tasks/tree',
    filters: filters,
    projectMembers: projectMembers
}) %>

<!-- ‰ªªÂä°Ê†ëÂÆπÂô® -->
<div class="row">
    <div class="col-12">
        <div id="taskTree" class="task-tree">
            <% if (rootTasks && rootTasks.length > 0) { %>
                <% rootTasks.forEach(task => { %>
                  <div class="tree-node" data-task-id="<%= task.id %>" data-level="0">
                    <div class="card mb-1 task-card">
                        <div class="card-body py-1 px-2">
                            <div class="row align-items-center">
                                <!-- Â±ïÂºÄÊåâÈíÆÂíå‰ªªÂä°Ê†áÈ¢ò -->
                                <div class="col-md-5">
                                    <div class="d-flex align-items-center">
                                        <!-- Â±ïÂºÄ/ÊäòÂè†ÊåâÈíÆ -->
                                        <span class="node-toggle me-2 <%= task.hasChildren ? '' : 'no-children' %>" title="hasChildren: <%= task.hasChildren %>">
                                            <% if (task.hasChildren) { %>
                                                <i class="fas fa-chevron-right"></i>
                                            <% } else { %>
                                                <span style="width: 16px; display: inline-block;"></span>
                                            <% } %>
                                        </span>

                                        <span class="badge bg-<%=
                                            task.taskType === 'requirement' ? 'info' :
                                            task.taskType === 'epic' ? 'purple' :
                                            task.taskType === 'story' ? 'primary' :
                                            task.taskType === 'dev_task' ? 'primary' :
                                            task.taskType === 'design_task' ? 'success' :
                                            task.taskType === 'test_task' ? 'warning' :
                                            task.taskType === 'devops_task' ? 'dark' :
                                            task.taskType === 'bug' ? 'danger' : 'secondary'
                                        %> me-2 task-type-badge">
                                            <%= task.taskType === 'requirement' ? 'üìã ÈúÄÊ±Ç' :
                                                task.taskType === 'epic' ? 'üè∞ Âè≤ËØó' :
                                                task.taskType === 'story' ? 'üìñ ÊïÖ‰∫ã' :
                                                task.taskType === 'dev_task' ? '‚öîÔ∏è ÂºÄÂèë' :
                                                task.taskType === 'design_task' ? 'üé® ËÆæËÆ°' :
                                                task.taskType === 'test_task' ? 'üèπ ÊµãËØï' :
                                                task.taskType === 'devops_task' ? '‚öôÔ∏è ËøêÁª¥' :
                                                task.taskType === 'bug' ? 'üêõ Áº∫Èô∑' : 'üìù ‰ªªÂä°' %>
                                        </span>

                                        <h6 class="card-title mb-0 me-2 text-truncate" style="max-width: 520px;">
                                            <a href="/tasks/<%= task.id %>" class="text-decoration-none task-title-link">
                                                <%= task.title %>
                                            </a>
                                        </h6>
                                        <span class="badge bg-warning">
                                            <% for(let i = 0; i < task.starLevel; i++) { %>‚≠ê<% } %>
                                        </span>
                                    </div>
                                </div>

                                <!-- Âø´ÈÄüÁºñËæëÂ≠óÊÆµ -->
                                <div class="col-md-1">
                                    <select class="form-select form-select-sm quick-edit-field"
                                            data-task-id="<%= task.id %>"
                                            data-field="status">
                                        <option value="draft" <%= task.status === 'draft' ? 'selected' : '' %>>ËçâÁ®ø</option>
                                        <option value="published" <%= task.status === 'published' ? 'selected' : '' %>>Â∑≤ÂèëÂ∏É</option>
                                        <option value="in_progress" <%= task.status === 'in_progress' ? 'selected' : '' %>>ËøõË°å‰∏≠</option>
                                        <option value="review" <%= task.status === 'review' ? 'selected' : '' %>>ÂæÖÂÆ°Ê†∏</option>
                                        <option value="completed" <%= task.status === 'completed' ? 'selected' : '' %>>Â∑≤ÂÆåÊàê</option>
                                        <option value="cancelled" <%= task.status === 'cancelled' ? 'selected' : '' %>>Â∑≤ÂèñÊ∂à</option>
                                    </select>
                                </div>
                                <div class="col-md-1">
                                    <select class="form-select form-select-sm quick-edit-field"
                                            data-task-id="<%= task.id %>"
                                            data-field="assigneeId">
                                        <option value="">Êú™ÂàÜÈÖç</option>
                                        <% if (task.project && task.project.members) { %>
                                            <% task.project.members.forEach(function(member) { %>
                                                <option value="<%= member.id %>" <%= task.assigneeId === member.id ? 'selected' : '' %>>
                                                    <%= (member.firstName + ' ' + member.lastName).trim() || member.username %>
                                                </option>
                                            <% }); %>
                                        <% } %>
                                    </select>
                                </div>
                                <div class="col-md-1">
                                    <select class="form-select form-select-sm quick-edit-field"
                                            data-task-id="<%= task.id %>"
                                            data-field="urgencyLevel">
                                        <option value="urgent" <%= task.urgencyLevel === 'urgent' ? 'selected' : '' %>>üî• Á¥ßÊÄ•</option>
                                        <option value="important" <%= task.urgencyLevel === 'important' ? 'selected' : '' %>>‚ö° ÈáçË¶Å</option>
                                        <option value="normal" <%= task.urgencyLevel === 'normal' ? 'selected' : '' %>>üìÖ ÊôÆÈÄö</option>
                                        <option value="delayed" <%= task.urgencyLevel === 'delayed' ? 'selected' : '' %>>üïê Âª∂Êúü</option>
                                        <option value="frozen" <%= task.urgencyLevel === 'frozen' ? 'selected' : '' %>>‚ùÑÔ∏è ÂÜªÁªì</option>
                                    </select>
                                </div>
                                <div class="col-md-1">
                                    <select class="form-select form-select-sm quick-edit-field"
                                            data-task-id="<%= task.id %>"
                                            data-field="sprintId">
                                        <option value="">Êú™ÂàÜÈÖç</option>
                                        <% if (typeof sprints !== 'undefined' && sprints && sprints.length > 0) { %>
                                            <% sprints.forEach(function(sprint) { %>
                                                <option value="<%= sprint.id %>" <%= task.sprintId === sprint.id ? 'selected' : '' %>>
                                                    <%= sprint.name %>
                                                </option>
                                            <% }); %>
                                        <% } %>
                                    </select>
                                </div>

                                <!-- ‰ªªÂä°‰ø°ÊÅØ -->
                                <div class="col-md-2">
                                    <small class="text-muted task-info">
                                        <!-- Á¨¨‰∏ÄË°åÔºöÂàõÂª∫‰∫∫ -->
                                        <div class="info-row">
                                            <i class="fas fa-user me-1"></i>
                                            <span><%= task.publisher ? (task.publisher.firstName + ' ' + task.publisher.lastName).trim() || task.publisher.username : 'Êú™Áü•' %></span>
                                        </div>

                                        <!-- Á¨¨‰∫åË°åÔºöÂ∑•Êó∂‰ø°ÊÅØ -->
                                        <div class="info-row">
                                            <% if (task.estimatedHours) { %>
                                                <i class="fas fa-clock me-1"></i>
                                                <span>È¢ÑËÆ° <%= task.estimatedHours %>h</span>
                                            <% } %>
                                            <% if (task.actualHours) { %>
                                                <span class="ms-2">
                                                    <i class="fas fa-stopwatch me-1"></i>
                                                    ÂÆûÈôÖ <%= task.actualHours %>h
                                                </span>
                                            <% } %>
                                        </div>

                                        <!-- Á¨¨‰∏âË°åÔºöÊó∂Èó¥‰ø°ÊÅØ -->
                                        <div class="info-row">
                                            <% if (task.startDate) { %>
                                                <i class="fas fa-play me-1"></i>
                                                <span><%= new Date(task.startDate).toLocaleDateString('zh-CN') %></span>
                                            <% } %>
                                            <% if (task.dueDate) { %>
                                                <span class="<%= task.startDate ? 'ms-2' : '' %>">
                                                    <i class="fas fa-flag me-1"></i>
                                                    <%= new Date(task.dueDate).toLocaleDateString('zh-CN') %>
                                                </span>
                                            <% } %>
                                        </div>

                                        <!-- Á¨¨ÂõõË°åÔºöËøõÂ∫¶Êù° -->
                                        <% const progress = task.progress || 0; %>
                                        <div class="info-row mt-1">
                                            <div class="d-flex align-items-center w-100">
                                                <i class="fas fa-chart-line me-1"></i>
                                                <div class="progress flex-grow-1 me-2" style="height: 6px;">
                                                    <div class="progress-bar
                                                        <% if (progress === 0) { %>bg-secondary
                                                        <% } else if (progress < 25) { %>bg-info
                                                        <% } else if (progress < 50) { %>bg-primary
                                                        <% } else if (progress < 75) { %>bg-warning
                                                        <% } else if (progress < 100) { %>bg-success
                                                        <% } else { %>bg-success
                                                        <% } %>"
                                                        role="progressbar"
                                                        style="width: <%= progress %>%;"
                                                        aria-valuenow="<%= progress %>"
                                                        aria-valuemin="0"
                                                        aria-valuemax="100">
                                                    </div>
                                                </div>
                                                <span class="text-nowrap progress-text"><%= progress %>%</span>
                                            </div>
                                        </div>
                                    </small>
                                </div>

                                <!-- Êìç‰ΩúÊåâÈíÆ -->
                                <div class="col-md-1 text-end">
                                    <div class="dropdown">
                                        <button class="btn btn-outline-secondary btn-sm dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                                            <i class="fas fa-ellipsis-h"></i>
                                        </button>
                                        <ul class="dropdown-menu">
                                            <li><a class="dropdown-item" href="/tasks/<%= task.id %>">
                                                <i class="fas fa-eye me-2"></i>Êü•ÁúãËØ¶ÊÉÖ
                                            </a></li>
                                            <li><a class="dropdown-item" href="/tasks/create?parent=<%= task.id %>">
                                                <i class="fas fa-plus me-2"></i>Ê∑ªÂä†Â≠ê‰ªªÂä°
                                            </a></li>
                                            <% if (user && (user.role === 'admin' || task.publisherId === user.id)) { %>
                                                <li><hr class="dropdown-divider"></li>
                                                <li><a class="dropdown-item" href="/tasks/<%= task.id %>/edit">
                                                    <i class="fas fa-edit me-2"></i>ÁºñËæë
                                                </a></li>
                                                <% if (task.isArchived) { %>
                                                    <li><a class="dropdown-item text-info" href="#" onclick="toggleArchiveTask('<%= task.id %>', false)">
                                                        <i class="fas fa-box-open me-2"></i>ÂèñÊ∂àÂΩíÊ°£
                                                    </a></li>
                                                <% } else { %>
                                                    <li><a class="dropdown-item text-warning" href="#" onclick="toggleArchiveTask('<%= task.id %>', true)">
                                                        <i class="fas fa-archive me-2"></i>ÂΩíÊ°£
                                                    </a></li>
                                                <% } %>
                                                <li><a class="dropdown-item text-danger" href="#" onclick="deleteTask('<%= task.id %>', '<%= task.title %>')">
                                                    <i class="fas fa-trash me-2"></i>Âà†Èô§
                                                </a></li>
                                            <% } %>
                                        </ul>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <!-- Â≠ê‰ªªÂä°ÂÆπÂô®Â∞ÜÈÄöËøáÊáíÂä†ËΩΩÂä®ÊÄÅÊ∑ªÂä† -->
                  </div>
                <% }) %>
            <% } else { %>
                <div class="text-center py-5">
                    <i class="fas fa-sitemap fa-3x text-muted mb-3"></i>
                    <h5 class="text-muted">ÊöÇÊó†‰ªªÂä°</h5>
                    <p class="text-muted mb-3">ËøòÊ≤°ÊúâÂàõÂª∫‰ªª‰Ωï‰ªªÂä°</p>
                    <a href="/tasks/create" class="btn btn-primary">
                        <i class="fas fa-plus me-2"></i>ÂàõÂª∫Á¨¨‰∏Ä‰∏™‰ªªÂä°
                    </a>
                </div>
            <% } %>
        </div>

        <!-- ÂàÜÈ°µ -->
        <% if (pagination && pagination.totalPages > 1) { %>
            <%
                // ÊûÑÂª∫Êü•ËØ¢Â≠óÁ¨¶‰∏≤ÁöÑËæÖÂä©ÂáΩÊï∞
                function buildQueryString(params) {
                    const queryParts = [];
                    Object.keys(params).forEach(key => {
                        if (params[key] && params[key] !== '') {
                            queryParts.push(encodeURIComponent(key) + '=' + encodeURIComponent(params[key]));
                        }
                    });
                    return queryParts.join('&');
                }
            %>
            <nav aria-label="‰ªªÂä°ÂàÜÈ°µ" class="mt-4">
                <ul class="pagination justify-content-center">
                    <% if (pagination.hasPrev) { %>
                        <li class="page-item">
                            <a class="page-link" href="?<%= buildQueryString({...filters, page: pagination.page - 1}) %>">
                                <i class="fas fa-chevron-left"></i>
                            </a>
                        </li>
                    <% } %>

                    <% for (let i = Math.max(1, pagination.page - 2); i <= Math.min(pagination.totalPages, pagination.page + 2); i++) { %>
                        <li class="page-item <%= i === pagination.page ? 'active' : '' %>">
                            <a class="page-link" href="?<%= buildQueryString({...filters, page: i}) %>">
                                <%= i %>
                            </a>
                        </li>
                    <% } %>

                    <% if (pagination.hasNext) { %>
                        <li class="page-item">
                            <a class="page-link" href="?<%= buildQueryString({...filters, page: pagination.page + 1}) %>">
                                <i class="fas fa-chevron-right"></i>
                            </a>
                        </li>
                    <% } %>
                </ul>

                <div class="text-center mt-2">
                    <small class="text-muted">
                        Á¨¨ <%= pagination.page %> È°µÔºåÂÖ± <%= pagination.totalPages %> È°µÔºåÊÄªËÆ° <%= pagination.total %> ‰∏™‰ªªÂä°
                    </small>
                </div>
            </nav>
        <% } %>
    </div>
</div>

<!-- ‰ªªÂä°Êìç‰ΩúÊ®°ÊÄÅÊ°Ü -->
<div class="modal fade" id="taskActionModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">‰ªªÂä°Êìç‰Ωú</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <div class="d-grid gap-2">
                    <button type="button" class="btn btn-primary" id="addSubtaskBtn">
                        <i class="fas fa-plus me-2"></i>Ê∑ªÂä†Â≠ê‰ªªÂä°
                    </button>
                    <button type="button" class="btn btn-outline-primary" id="editTaskBtn">
                        <i class="fas fa-edit me-2"></i>ÁºñËæë‰ªªÂä°
                    </button>
                    <button type="button" class="btn btn-outline-info" id="viewTaskBtn">
                        <i class="fas fa-eye me-2"></i>Êü•ÁúãËØ¶ÊÉÖ
                    </button>
                    <hr>
                    <button type="button" class="btn btn-outline-danger" id="deleteTaskBtn">
                        <i class="fas fa-trash me-2"></i>Âà†Èô§‰ªªÂä°
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
/* Â§çÁî®ÂàóË°®ËßÜÂõæÁöÑÊ†∑Âºè */
.quick-edit-field.loading {
    opacity: 0.6;
    pointer-events: none;
}

.quick-edit-field.loading::after {
    content: '';
    position: absolute;
    top: 50%;
    right: 10px;
    width: 16px;
    height: 16px;
    margin-top: -8px;
    border: 2px solid #ccc;
    border-top-color: #007bff;
    border-radius: 50%;
    animation: spin 1s linear infinite;
}

@keyframes spin {
    to {
        transform: rotate(360deg);
    }
}

.task-card {
    transition: box-shadow 0.2s ease;
}

.task-card:hover {
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
}

.task-card .card-body {
    padding: 0.75rem 1rem;
    min-height: 60px;
}

.task-card .card-title {
    font-size: 1rem;
    font-weight: 600;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
}

.task-card .badge {
    font-size: 0.75em;
    padding: 0.25em 0.5em;
}

.task-type-badge {
    font-size: 0.8em !important;
    padding: 0.4em 0.6em !important;
    font-weight: 500 !important;
    min-width: 60px;
    text-align: center;
}

/* Ëá™ÂÆö‰πâÁ¥´Ëâ≤ËÉåÊôØ */
.bg-purple {
    background-color: #6f42c1 !important;
    color: white !important;
}

.task-card small {
    font-size: 0.75rem;
    line-height: 1.2;
}

.task-info .info-row {
    margin-bottom: 2px;
    display: flex;
    align-items: center;
    flex-wrap: wrap;
}

.task-info .info-row:last-child {
    margin-bottom: 0;
}

.task-info .progress-text {
    font-size: 0.7rem;
    min-width: 28px;
    text-align: right;
}

.task-card .form-select-sm {
    font-size: 0.9rem;
    padding: 0.375rem 0.75rem;
    height: auto;
    min-height: 32px;
}

.task-card .dropdown-toggle {
    padding: 0.375rem 0.75rem;
    font-size: 0.9rem;
    min-height: 32px;
}

.task-card .row {
    min-height: 40px;
}

.task-title-link {
    color: #212529 !important;
    transition: color 0.2s ease;
}

.task-title-link:hover {
    color: #0d6efd !important;
    text-decoration: underline !important;
}

/* Ê†ëÂΩ¢ËßÜÂõæÁâπÊúâÊ†∑Âºè */
.tree-node {
    position: relative;
}

.node-toggle {
    display: inline-block;
    width: 16px;
    height: 16px;
    text-align: center;
    line-height: 16px;
    cursor: pointer;
    color: #6c757d;
    transition: transform 0.2s ease;
    font-size: 0.8rem;
}

.node-toggle:hover {
    color: #495057;
}

.node-toggle.expanded {
    transform: rotate(90deg);
}

.node-toggle.no-children {
    cursor: default;
    pointer-events: none;
    opacity: 0.3;
}

.node-children {
    margin-left: 40px;
    border-left: 2px solid #e9ecef;
    padding-left: 20px;
    margin-top: 4px;
}

.tree-node[data-level="1"] .task-card {
    margin-left: 0;
}

.tree-node[data-level="2"] .task-card {
    margin-left: 0;
}

.tree-node[data-level="3"] .task-card {
    margin-left: 0;
}

.loading-subtasks {
    margin-left: 40px;
    padding: 8px 12px;
    color: #6c757d;
    font-style: italic;
    font-size: 0.875rem;
}

/* ‰∏ãÊãâËèúÂçïÂ±ÇÁ∫ß‰øÆÂ§ç - Ëß£ÂÜ≥Ë¢´ÈÅÆÊå°ÈóÆÈ¢ò */
.dropdown-menu {
    z-index: 1050 !important;
}

/* ÂΩì‰∏ãÊãâËèúÂçïÊâìÂºÄÊó∂ÔºåÊèêÂçáÊï¥‰∏™‰ªªÂä°Âç°ÁâáÁöÑÂ±ÇÁ∫ß */
.task-card:has(.dropdown.show),
.task-card.dropdown-active,
.tree-node:has(.dropdown.show),
.tree-node.dropdown-active {
    z-index: 1051 !important;
    position: relative;
}

/* Á°Æ‰øù‰∏ãÊãâËèúÂçïÂÆπÂô®ÊúâË∂≥Â§üÁöÑÂ±ÇÁ∫ß */
.task-card .dropdown.show,
.tree-node .dropdown.show {
    z-index: 1052 !important;
    position: relative;
}
</style>



<%- include('../partials/footer') %>

<script>
// Á≠âÂæÖjQueryÂä†ËΩΩÂÆåÊàê
(function() {
    function initTreeView() {
        if (typeof $ === 'undefined') {
            setTimeout(initTreeView, 100);
            return;
        }

        $(document).ready(function() {
            let currentTaskId = null;

            // ËÆæÁΩÆËø≠‰ª£Êï∞ÊçÆ
            window.subtaskSprints = <%-JSON.stringify(sprints || [])%>;

            // ÂàùÂßãÂåñÂø´ÈÄüÁºñËæëÂ≠óÊÆµÔºå‰øùÂ≠òÂéüÂßãÂÄº
            $('.quick-edit-field').each(function() {
                const $select = $(this);
                $select.data('original-value', $select.val());
            });

            // ÂàùÂßãÂåñ‰∏ãÊãâËèúÂçïÂÆö‰Ωç‰øÆÂ§ç
            initDropdownFix();

            // Âø´ÈÄüÁºñËæëÂ≠óÊÆµÂ§ÑÁêÜ
            $(document).on('change', '.quick-edit-field', function() {
                const $select = $(this);
                const taskId = $select.data('task-id');
                const field = $select.data('field');
                const value = $select.val();
                const originalValue = $select.data('original-value');

                console.log('Âø´ÈÄüÁºñËæëËß¶Âèë:', { taskId, field, value, originalValue });

                // Á¶ÅÁî®ÈÄâÊã©Ê°ÜÂπ∂ÊòæÁ§∫Âä†ËΩΩÁä∂ÊÄÅ
                $select.prop('disabled', true);
                $select.addClass('loading');

                // ÂèëÈÄÅAJAXËØ∑Ê±Ç
                $.ajax({
                    url: `/tasks/${taskId}/quick-update`,
                    method: 'POST',
                    dataType: 'json',
                    headers: {
                        'Accept': 'application/json',
                        'Content-Type': 'application/x-www-form-urlencoded'
                    },
                    data: {
                        field: field,
                        value: value
                    },
                    success: function(response) {
                        console.log('AJAXÊàêÂäüÂìçÂ∫î:', response);
                        if (response.success) {
                            // ÊòæÁ§∫ÊàêÂäüÊèêÁ§∫
                            showToast('success', response.message);
                            // Êõ¥Êñ∞ÂéüÂßãÂÄº
                            $select.data('original-value', value);
                        } else {
                            // ÊÅ¢Â§çÂéüÂßãÂÄº
                            $select.val($select.data('original-value'));
                            showToast('error', response.message || 'Êõ¥Êñ∞Â§±Ë¥•');
                        }
                    },
                    error: function(xhr, status, error) {
                        console.error('AJAXÈîôËØØ:', { xhr, status, error });
                        console.error('ÂìçÂ∫îÊñáÊú¨:', xhr.responseText);
                        // ÊÅ¢Â§çÂéüÂßãÂÄº
                        $select.val($select.data('original-value'));
                        const errorMsg = xhr.responseJSON?.message || `ÁΩëÁªúÈîôËØØÔºö${error}`;
                        showToast('error', errorMsg);
                    },
                    complete: function() {
                        // ÊÅ¢Â§çÈÄâÊã©Ê°ÜÁä∂ÊÄÅ
                        $select.prop('disabled', false);
                        $select.removeClass('loading');
                    }
                });
            });

            // ÂÖ®ÈÉ®Â±ïÂºÄ
            $('#expandAll').click(function() {
                $('.node-children').show();
                $('.node-toggle').addClass('expanded');
                $('.node-toggle i').removeClass('fa-chevron-right').addClass('fa-chevron-down');
            });

            // ÂÖ®ÈÉ®ÊäòÂè†
            $('#collapseAll').click(function() {
                $('.node-children').hide();
                $('.node-toggle').removeClass('expanded');
                $('.node-toggle i').removeClass('fa-chevron-down').addClass('fa-chevron-right');
            });

            // ËäÇÁÇπÂ±ïÂºÄ/ÊäòÂè†
            $(document).on('click', '.node-toggle:not(.no-children)', function(e) {
                e.stopPropagation();
                const $toggle = $(this);
                const $node = $toggle.closest('.tree-node');
                const $children = $node.find('> .node-children');
                const taskId = $node.data('task-id');

                // Á°Æ‰øùÂè™ÊúâÊúâÂ≠ê‰ªªÂä°ÁöÑËäÇÁÇπÊâçËÉΩÂ±ïÂºÄ
                if ($toggle.hasClass('no-children')) {
                    return;
                }

                if ($children.length === 0) {
                    // ÊáíÂä†ËΩΩÂ≠ê‰ªªÂä°
                    loadSubtasks(taskId, $node);
                } else {
                    // ÂàáÊç¢ÊòæÁ§∫/ÈöêËóè
                    $children.toggle();
                    $toggle.toggleClass('expanded');
                    $toggle.find('i').toggleClass('fa-chevron-right fa-chevron-down');
                }
            });

            // ‰ªªÂä°Âè≥ÈîÆËèúÂçï
            $(document).on('contextmenu', '.node-content', function(e) {
                e.preventDefault();
                currentTaskId = $(this).closest('.tree-node').data('task-id');
                $('#taskActionModal').modal('show');
            });



            // ‰ªªÂä°Êìç‰Ωú
            $('#addSubtaskBtn').click(function() {
                window.location.href = `/tasks/create?parent=${currentTaskId}`;
            });

            $('#editTaskBtn').click(function() {
                if (window.KanbanApp && window.KanbanApp.showAlert) {
                    KanbanApp.showAlert('ÁºñËæëÂäüËÉΩÊ≠£Âú®ÂºÄÂèë‰∏≠...', 'info');
                } else {
                    alert('ÁºñËæëÂäüËÉΩÊ≠£Âú®ÂºÄÂèë‰∏≠...');
                }
            });

            $('#viewTaskBtn').click(function() {
                window.location.href = `/tasks/${currentTaskId}`;
            });

            $('#deleteTaskBtn').click(function() {
                if (window.KanbanApp && window.KanbanApp.confirmAction) {
                    KanbanApp.confirmAction('Á°ÆÂÆöË¶ÅÂà†Èô§Ëøô‰∏™‰ªªÂä°ÂêóÔºü', function() {
                        KanbanApp.showAlert('Âà†Èô§ÂäüËÉΩÊ≠£Âú®ÂºÄÂèë‰∏≠...', 'info');
                    });
                } else {
                    if (confirm('Á°ÆÂÆöË¶ÅÂà†Èô§Ëøô‰∏™‰ªªÂä°ÂêóÔºü')) {
                        alert('Âà†Èô§ÂäüËÉΩÊ≠£Âú®ÂºÄÂèë‰∏≠...');
                    }
                }
            });
        });
    }

    initTreeView();
})();

// ÊáíÂä†ËΩΩÂ≠ê‰ªªÂä°
function loadSubtasks(taskId, $parentNode) {
    const level = parseInt($parentNode.data('level')) + 1;

    // ÊòæÁ§∫Âä†ËΩΩÁä∂ÊÄÅ
    $parentNode.append('<div class="loading-subtasks"><i class="fas fa-spinner fa-spin me-2"></i>Âä†ËΩΩ‰∏≠...</div>');

    $.get(`/tasks/${taskId}/subtasks?level=1`)
        .done(function(response) {
            if (response.success && response.data.length > 0) {
                // ‰øùÂ≠òËø≠‰ª£Êï∞ÊçÆÂà∞ÂÖ®Â±ÄÂèòÈáè
                if (response.sprints) {
                    window.subtaskSprints = response.sprints;
                }

                const subtasksHtml = generateSubtasksHtml(response.data, level);
                $parentNode.find('.loading-subtasks').remove();
                $parentNode.append(`<div class="node-children">${subtasksHtml}</div>`);

                // ‰∏∫Êñ∞Âä†ËΩΩÁöÑÂø´ÈÄüÁºñËæëÂ≠óÊÆµËÆæÁΩÆÂéüÂßãÂÄº
                $parentNode.find('.node-children .quick-edit-field').each(function() {
                    const $select = $(this);
                    $select.data('original-value', $select.val());
                });

                // Êõ¥Êñ∞ÂàáÊç¢ÂõæÊ†á
                const $toggle = $parentNode.find('> .node-content .node-toggle');
                $toggle.addClass('expanded');
                $toggle.find('i').removeClass('fa-chevron-right').addClass('fa-chevron-down');
            } else {
                $parentNode.find('.loading-subtasks').remove();
                if (window.KanbanApp && window.KanbanApp.showAlert) {
                    KanbanApp.showAlert('Ê≤°ÊúâÂ≠ê‰ªªÂä°', 'info', 2000);
                }
            }
        })
        .fail(function() {
            $parentNode.find('.loading-subtasks').remove();
            if (window.KanbanApp && window.KanbanApp.showAlert) {
                KanbanApp.showAlert('Âä†ËΩΩÂ≠ê‰ªªÂä°Â§±Ë¥•', 'danger');
            } else {
                alert('Âä†ËΩΩÂ≠ê‰ªªÂä°Â§±Ë¥•');
            }
        });
}

// ‰ªªÂä°Á±ªÂûãÊòæÁ§∫ÂêçÁß∞Êò†Â∞Ñ
function getTaskTypeDisplayName(taskType) {
    const typeMap = {
        'requirement': 'üìã ÈúÄÊ±Ç',
        'task': 'üìù ‰ªªÂä°',
        'bug': 'üêõ Áº∫Èô∑',
        'epic': 'üè∞ Âè≤ËØó',
        'story': 'üìñ ÊïÖ‰∫ã',
        'dev_task': '‚öîÔ∏è ÂºÄÂèë',
        'design_task': 'üé® ËÆæËÆ°',
        'test_task': 'üèπ ÊµãËØï',
        'devops_task': '‚öôÔ∏è ËøêÁª¥'
    };
    return typeMap[taskType] || taskType;
}

// ‰ªªÂä°Á±ªÂûãÂæΩÁ´†È¢úËâ≤Êò†Â∞Ñ
function getTaskTypeBadgeColor(taskType) {
    const colorMap = {
        'requirement': 'info',
        'task': 'secondary',
        'bug': 'danger',
        'epic': 'purple',
        'story': 'primary',
        'dev_task': 'primary',
        'design_task': 'success',
        'test_task': 'warning',
        'devops_task': 'dark'
    };
    return colorMap[taskType] || 'secondary';
}

// ÁîüÊàêÂ≠ê‰ªªÂä°HTML
function generateSubtasksHtml(subtasks, level) {
    let html = '';
    subtasks.forEach(task => {
        const stars = '‚≠ê'.repeat(task.starLevel);
        const hasChildren = task.hasChildren;
        const toggleIcon = hasChildren ? '<i class="fas fa-chevron-right"></i>' : '<span style="width: 16px; display: inline-block;"></span>';
        const toggleClass = hasChildren ? '' : 'no-children';

        // Á¥ßÊÄ•Á®ãÂ∫¶ÈÄâÈ°π
        const urgencyOptions = [
            { value: 'urgent', text: 'üî• Á¥ßÊÄ•', selected: task.urgencyLevel === 'urgent' },
            { value: 'important', text: '‚ö° ÈáçË¶Å', selected: task.urgencyLevel === 'important' },
            { value: 'normal', text: 'üìÖ ÊôÆÈÄö', selected: task.urgencyLevel === 'normal' },
            { value: 'delayed', text: 'üïê Âª∂Êúü', selected: task.urgencyLevel === 'delayed' },
            { value: 'frozen', text: '‚ùÑÔ∏è ÂÜªÁªì', selected: task.urgencyLevel === 'frozen' }
        ];

        // Áä∂ÊÄÅÈÄâÈ°π
        const statusOptions = [
            { value: 'draft', text: 'ËçâÁ®ø', selected: task.status === 'draft' },
            { value: 'published', text: 'Â∑≤ÂèëÂ∏É', selected: task.status === 'published' },
            { value: 'in_progress', text: 'ËøõË°å‰∏≠', selected: task.status === 'in_progress' },
            { value: 'review', text: 'ÂæÖÂÆ°Ê†∏', selected: task.status === 'review' },
            { value: 'completed', text: 'Â∑≤ÂÆåÊàê', selected: task.status === 'completed' },
            { value: 'cancelled', text: 'Â∑≤ÂèñÊ∂à', selected: task.status === 'cancelled' }
        ];

        html += `
            <div class="tree-node" data-task-id="${task.id}" data-level="${level}">
                <div class="card mb-1 task-card">
                    <div class="card-body py-1 px-2">
                        <div class="row align-items-center">
                            <!-- Â±ïÂºÄÊåâÈíÆÂíå‰ªªÂä°Ê†áÈ¢ò -->
                            <div class="col-md-5">
                                <div class="d-flex align-items-center">
                                    <span class="node-toggle me-2 ${toggleClass}">${toggleIcon}</span>
                                    <span class="badge bg-${getTaskTypeBadgeColor(task.taskType)} me-2 task-type-badge">
                                        ${getTaskTypeDisplayName(task.taskType)}
                                    </span>
                                    <h6 class="card-title mb-0 me-2 text-truncate" style="max-width: 120px;">
                                        <a href="/tasks/${task.id}" class="text-decoration-none task-title-link">
                                            ${task.title}
                                        </a>
                                    </h6>
                                    <span class="badge bg-warning">${stars}</span>
                                </div>
                            </div>

                            <!-- Âø´ÈÄüÁºñËæëÂ≠óÊÆµ -->
                            <div class="col-md-1">
                                <select class="form-select form-select-sm quick-edit-field" data-task-id="${task.id}" data-field="status">
                                    ${statusOptions.map(opt => `<option value="${opt.value}" ${opt.selected ? 'selected' : ''}>${opt.text}</option>`).join('')}
                                </select>
                            </div>
                            <div class="col-md-1">
                                <select class="form-select form-select-sm quick-edit-field" data-task-id="${task.id}" data-field="assigneeId">
                                    <option value="">Êú™ÂàÜÈÖç</option>
                                    ${task.project && task.project.members ?
                                        task.project.members.map(member =>
                                            `<option value="${member.id}" ${task.assigneeId === member.id ? 'selected' : ''}>
                                                ${(member.firstName + ' ' + member.lastName).trim() || member.username}
                                            </option>`
                                        ).join('') : ''
                                    }
                                </select>
                            </div>
                            <div class="col-md-1">
                                <select class="form-select form-select-sm quick-edit-field" data-task-id="${task.id}" data-field="urgencyLevel">
                                    ${urgencyOptions.map(opt => `<option value="${opt.value}" ${opt.selected ? 'selected' : ''}>${opt.text}</option>`).join('')}
                                </select>
                            </div>
                            <div class="col-md-1">
                                <select class="form-select form-select-sm quick-edit-field" data-task-id="${task.id}" data-field="sprintId">
                                    <option value="">Êú™ÂàÜÈÖç</option>
                                    ${window.subtaskSprints && window.subtaskSprints.length > 0 ?
                                        window.subtaskSprints.map(sprint =>
                                            `<option value="${sprint.id}" ${task.sprintId === sprint.id ? 'selected' : ''}>
                                                ${sprint.name}
                                            </option>`
                                        ).join('') : ''
                                    }
                                </select>
                            </div>

                            <!-- ‰ªªÂä°‰ø°ÊÅØ -->
                            <div class="col-md-2">
                                <small class="text-muted">
                                    <div><i class="fas fa-user me-1"></i>${task.publisher ? (task.publisher.firstName + ' ' + task.publisher.lastName).trim() || task.publisher.username : 'Êú™Áü•'}</div>
                                    ${task.estimatedHours || task.dueDate ? `<div>
                                        ${task.estimatedHours ? `<i class="fas fa-clock me-1"></i>${task.estimatedHours}h` : ''}
                                        ${task.dueDate ? `<i class="fas fa-calendar ms-1 me-1"></i>${new Date(task.dueDate).toLocaleDateString('zh-CN')}` : ''}
                                    </div>` : ''}
                                    <!-- ËøõÂ∫¶Êù° -->
                                    <div class="mt-1">
                                        <div class="d-flex align-items-center">
                                            <i class="fas fa-chart-line me-1"></i>
                                            <div class="progress flex-grow-1 me-2" style="height: 8px;">
                                                <div class="progress-bar
                                                    ${task.progress === 0 ? 'bg-secondary' :
                                                      task.progress < 25 ? 'bg-info' :
                                                      task.progress < 50 ? 'bg-primary' :
                                                      task.progress < 75 ? 'bg-warning' :
                                                      task.progress < 100 ? 'bg-success' : 'bg-success'}"
                                                    role="progressbar"
                                                    style="width: ${task.progress || 0}%;"
                                                    aria-valuenow="${task.progress || 0}"
                                                    aria-valuemin="0"
                                                    aria-valuemax="100">
                                                </div>
                                            </div>
                                            <span class="text-nowrap" style="font-size: 0.75rem;">${task.progress || 0}%</span>
                                        </div>
                                    </div>
                                </small>
                            </div>

                            <!-- Êìç‰ΩúÊåâÈíÆ -->
                            <div class="col-md-1 text-end">
                                <div class="dropdown">
                                    <button class="btn btn-outline-secondary btn-sm dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                                        <i class="fas fa-ellipsis-h"></i>
                                    </button>
                                    <ul class="dropdown-menu">
                                        <li><a class="dropdown-item" href="/tasks/${task.id}">
                                            <i class="fas fa-eye me-2"></i>Êü•ÁúãËØ¶ÊÉÖ
                                        </a></li>
                                        <li><a class="dropdown-item" href="/tasks/create?parent=${task.id}">
                                            <i class="fas fa-plus me-2"></i>Ê∑ªÂä†Â≠ê‰ªªÂä°
                                        </a></li>
                                        <li><hr class="dropdown-divider"></li>
                                        <li><a class="dropdown-item" href="/tasks/${task.id}/edit">
                                            <i class="fas fa-edit me-2"></i>ÁºñËæë
                                        </a></li>
                                        <li><a class="dropdown-item text-danger" href="#" onclick="deleteTask('${task.id}', '${task.title}')">
                                            <i class="fas fa-trash me-2"></i>Âà†Èô§
                                        </a></li>
                                    </ul>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        `;
    });
    return html;
}

// ÊòæÁ§∫ÊèêÁ§∫Ê∂àÊÅØ
function showToast(type, message) {
    // ÂàõÂª∫ÊèêÁ§∫ÂÖÉÁ¥†
    const toast = $(`
        <div class="toast align-items-center text-white bg-${type === 'success' ? 'success' : 'danger'} border-0" role="alert" aria-live="assertive" aria-atomic="true">
            <div class="d-flex">
                <div class="toast-body">
                    <i class="fas fa-${type === 'success' ? 'check' : 'exclamation-triangle'} me-2"></i>
                    ${message}
                </div>
                <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
            </div>
        </div>
    `);

    // Ê∑ªÂä†Âà∞È°µÈù¢
    let toastContainer = $('#toast-container');
    if (toastContainer.length === 0) {
        toastContainer = $('<div id="toast-container" class="toast-container position-fixed top-0 end-0 p-3" style="z-index: 1055;"></div>');
        $('body').append(toastContainer);
    }

    toastContainer.append(toast);

    // ÊòæÁ§∫ÊèêÁ§∫
    const bsToast = new bootstrap.Toast(toast[0]);
    bsToast.show();

    // Ëá™Âä®ÁßªÈô§
    toast.on('hidden.bs.toast', function() {
        $(this).remove();
    });
}

// ÂàùÂßãÂåñ‰∏ãÊãâËèúÂçïÂÆö‰Ωç‰øÆÂ§ç
function initDropdownFix() {
    // ÁõëÂê¨ÊâÄÊúâ‰∏ãÊãâËèúÂçïÁöÑÊòæÁ§∫‰∫ã‰ª∂
    $(document).on('show.bs.dropdown', '.task-card .dropdown, .tree-node .dropdown', function(e) {
        const $dropdown = $(this);
        const $menu = $dropdown.find('.dropdown-menu');

        // Ê†áËÆ∞‰ªªÂä°Âç°Áâá‰∏∫Ê¥ªÂä®Áä∂ÊÄÅÔºåÊèêÂçáz-index
        $dropdown.closest('.task-card, .tree-node').addClass('dropdown-active');

        // ÁÆÄÂåñÂÆö‰ΩçÈÄªËæëÔºåËÆ©BootstrapËá™Â∑±Â§ÑÁêÜÂÆö‰Ωç
        // Âè™ÈúÄË¶ÅÁ°Æ‰øùz-indexË∂≥Â§üÈ´ò
        setTimeout(() => {
            $menu.css({
                zIndex: 10000
            });
        }, 0);
    });

    // ÁõëÂê¨‰∏ãÊãâËèúÂçïÁöÑÈöêËóè‰∫ã‰ª∂
    $(document).on('hide.bs.dropdown', '.task-card .dropdown, .tree-node .dropdown', function(e) {
        const $dropdown = $(this);

        // ÁßªÈô§‰ªªÂä°Âç°ÁâáÁöÑÊ¥ªÂä®Áä∂ÊÄÅ
        $dropdown.closest('.task-card, .tree-node').removeClass('dropdown-active');
    });
}

// ÂΩíÊ°£/ÂèñÊ∂àÂΩíÊ°£‰ªªÂä°ÂáΩÊï∞
function toggleArchiveTask(taskId, isArchive) {
    const action = isArchive ? 'ÂΩíÊ°£' : 'ÂèñÊ∂àÂΩíÊ°£';
    const confirmMessage = isArchive
        ? 'Á°ÆÂÆöË¶ÅÂΩíÊ°£Ê≠§‰ªªÂä°ÂêóÔºü\n\nÂΩíÊ°£ÂêéÁöÑ‰ªªÂä°Â∞Ü‰ªéÂ∏∏ËßÑËßÜÂõæ‰∏≠ÈöêËóèÔºåÈúÄË¶ÅÂú®Á≠õÈÄâÂô®‰∏≠ÈÄâÊã©"Â∑≤ÂΩíÊ°£"ÊâçËÉΩÊü•Áúã„ÄÇ'
        : 'Á°ÆÂÆöË¶ÅÂèñÊ∂àÂΩíÊ°£Ê≠§‰ªªÂä°ÂêóÔºü\n\nÂèñÊ∂àÂΩíÊ°£ÂêéÁöÑ‰ªªÂä°Â∞ÜÈáçÊñ∞ÊòæÁ§∫Âú®Â∏∏ËßÑËßÜÂõæ‰∏≠„ÄÇ';

    if (confirm(confirmMessage)) {
        const url = isArchive ? `/tasks/${taskId}/archive` : `/tasks/${taskId}/unarchive`;

        // ÂèëÈÄÅAJAXËØ∑Ê±Ç
        $.ajax({
            url: url,
            method: 'POST',
            dataType: 'json',
            headers: {
                'Accept': 'application/json',
                'Content-Type': 'application/x-www-form-urlencoded'
            },
            success: function(response) {
                if (response.success) {
                    showToast('success', response.message);
                    // Âà∑Êñ∞È°µÈù¢‰ª•Êõ¥Êñ∞‰ªªÂä°ÂàóË°®
                    setTimeout(() => {
                        window.location.reload();
                    }, 1000);
                } else {
                    showToast('error', response.message || `${action}Â§±Ë¥•`);
                }
            },
            error: function(xhr, status, error) {
                console.error('ÂΩíÊ°£Êìç‰ΩúÈîôËØØ:', { xhr, status, error });
                const errorMsg = xhr.responseJSON?.message || `${action}Â§±Ë¥•Ôºö${error}`;
                showToast('error', errorMsg);
            }
        });
    }
}

// Âà†Èô§‰ªªÂä°ÂáΩÊï∞
function deleteTask(taskId, taskTitle) {
    if (confirm(`Á°ÆÂÆöË¶ÅÂà†Èô§‰ªªÂä°"${taskTitle}"ÂêóÔºü\n\nÊ≠§Êìç‰Ωú‰∏çÂèØÊí§ÈîÄÔºå‰ªªÂä°ÁöÑÊâÄÊúâÁõ∏ÂÖ≥Êï∞ÊçÆÈÉΩÂ∞ÜË¢´Âà†Èô§„ÄÇ`)) {
        // ÂàõÂª∫Ë°®ÂçïÂπ∂Êèê‰∫§
        const form = document.createElement('form');
        form.method = 'POST';
        form.action = `/tasks/${taskId}/delete`;

        // Ê∑ªÂä†CSRF tokenÔºàÂ¶ÇÊûúÈúÄË¶ÅÔºâ
        const csrfToken = document.querySelector('meta[name="csrf-token"]');
        if (csrfToken) {
            const csrfInput = document.createElement('input');
            csrfInput.type = 'hidden';
            csrfInput.name = '_token';
            csrfInput.value = csrfToken.getAttribute('content');
            form.appendChild(csrfInput);
        }

        document.body.appendChild(form);
        form.submit();
    }
}

// ÊòæÁ§∫ÊèêÁ§∫Ê∂àÊÅØ
function showToast(type, message) {
    // ÂàõÂª∫ÊèêÁ§∫ÂÖÉÁ¥†
    const toast = $(`
        <div class="toast align-items-center text-white bg-${type === 'success' ? 'success' : 'danger'} border-0" role="alert" aria-live="assertive" aria-atomic="true">
            <div class="d-flex">
                <div class="toast-body">
                    <i class="fas fa-${type === 'success' ? 'check' : 'exclamation-triangle'} me-2"></i>
                    ${message}
                </div>
                <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
            </div>
        </div>
    `);

    // Ê∑ªÂä†Âà∞È°µÈù¢
    let toastContainer = $('#toast-container');
    if (toastContainer.length === 0) {
        toastContainer = $('<div id="toast-container" class="toast-container position-fixed top-0 end-0 p-3" style="z-index: 1055;"></div>');
        $('body').append(toastContainer);
    }

    toastContainer.append(toast);

    // ÊòæÁ§∫ÊèêÁ§∫
    const bsToast = new bootstrap.Toast(toast[0]);
    bsToast.show();

    // Ëá™Âä®ÁßªÈô§
    toast.on('hidden.bs.toast', function() {
        $(this).remove();
    });
}

</script>
